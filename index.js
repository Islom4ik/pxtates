const { Scenes, session, Telegraf, Markup } = require('telegraf');
require('dotenv').config();
const bot = new Telegraf(process.env.BOT_TOKEN);
module.exports = {Markup}
const { main_keyboards, predloj_keyboards, predloj_senderinfo, predloj_senderonv, links, dlinks, vpacks, bpacks, pxtpacks, bpxtpacks, reklam_keyboards, uslugi_keyboards, uslug_svedm_keyboards, uslug_beats_keyboards, lisenziya } = require('./additions/markups.js')  
const { beatsinfo, svedinfo } = require('./additions/extra.js')
const { collection, ObjectId } = require('./additions/db');
// bot.telegram.setWebhook('https://zade-production.up.railway.app', {max_connections: 50});
// const { DateTime } = require('luxon');
const { enter, leave } = Scenes.Stage;

const predlojka = new Scenes.BaseScene("predlojka");

predlojka.enter(async ctx => {
    try {
        return await ctx.reply('ü•î –ü—Ä–µ–¥–ª–æ–∂–∏—Ç–µ —Å–≤–æ—é –Ω–æ–≤–æ—Å—Ç—å, –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ–º, –∏–¥–µ—é –¥–ª—è –≤–∏–¥–µ–æ, –∏–ª–∏ –∑–∞–¥–∞–π—Ç–µ –º–Ω–µ –≤–æ–ø—Ä–æ—Å: ', {reply_markup: {keyboard: [['–û—Ç–º–µ–Ω–∏—Ç—å üî¥']], resize_keyboard: true}})
    } catch (e) {
        console.error(e);
    }
})

predlojka.on('text', async ctx => {
    try {
        if(ctx.message.text == '–û—Ç–º–µ–Ω–∏—Ç—å üî¥') {
            await ctx.reply('–û—Ç–º–µ–Ω–µ–Ω–æ ‚úÖ', {reply_markup: {remove_keyboard: true}})
            await ctx.replyWithPhoto('AgACAgIAAxkBAAIBQGRwpdUHgsO-VzXinFdsqtt53IflAAJcyzEb3-yIS8NvKBi2G2GKAQADAgADeAADLwQ', {caption: `–ü—Ä–∏–≤–µ—Ç, ${ctx.from.first_name}! –Ø –±–æ—Ç –ü–æ—Ç—ç–π—Ç–æ—Å–∞ ‚ú®\n\n–ï—Å–ª–∏ —É —Ç–µ–±—è –µ—Å—Ç—å –∫–∞–∫–∏–µ-—Ç–æ –≤–æ–ø—Ä–æ—Å—ã, –ø–æ–∂–µ–ª–∞–Ω–∏—è –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è - —Ç—ã –º–æ–∂–µ—à—å –æ–ø–∏—Å–∞—Ç—å –∏—Ö –∑–¥–µ—Å—å üí¨\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞üëáüèª`, reply_markup: {inline_keyboard: main_keyboards}})
            return ctx.scene.leave('predlojka')
        }
        await ctx.reply('–û–±—Ä–∞–±–æ—Ç–∫–∞...', {reply_markup: {remove_keyboard: true}})
        await collection.findOneAndUpdate({user_id: ctx.from.id}, {$set: {predlmsg: ctx.message.message_id, predmsg: ctx.message.text}})
        await ctx.reply('–í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∞–º–∏ –Ω–∞–ø–∏—Å–∞–Ω–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –≤—ã—à–µ?', {reply_to_message_id: ctx.message.message_id, reply_markup: {inline_keyboard: predloj_keyboards}})
    } catch (e) {
        console.error(e);
    }
})

predlojka.action('predlojedit', async ctx => {
    try {
        await ctx.deleteMessage(ctx.callbackQuery.message.message_id)
        await ctx.answerCbQuery('–ó–∞–≥—Ä—É–∂–∞—é...', {show_alert: false})
        await ctx.scene.enter('predlojka')
    } catch (e) {
        console.error(e);
    }
})

predlojka.action('predlojsend', async ctx => {
    try {
        const prid = await collection.findOne({_id: new ObjectId('646f07782ec51704c9ff90bd')})
        const predid = prid.predlojids + 1
        const db = await collection.findOne({user_id: ctx.from.id})
        await collection.findOneAndUpdate({_id: new ObjectId('646f07782ec51704c9ff90bd')}, {$set: {predlojids: predid}})
        await ctx.telegram.sendMessage(1031267639, `${predid}# | –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–µ–¥–ª–æ–∂–∫–∏:\n<i>${db.predmsg}</i>`, {reply_markup: {inline_keyboard: predloj_senderinfo}, parse_mode: "HTML"})
        try {
            await ctx.deleteMessage(ctx.callbackQuery.message.message_id)
        } catch (e) {
           console.log('ER'); 
        }
        await collection.findOneAndUpdate({user_id: ctx.from.id}, {$set: {predsend: `${predid}`}})
        await ctx.reply('–û—Ç–ø—Ä–∞–≤–∏–ª ‚úÖ', {reply_markup: {inline_keyboard: [[Markup.button.callback('‚èÆ –í –º–µ–Ω—é', 'backtomnscenes')]]}})
        await ctx.answerCbQuery('–û—Ç–ø—Ä–∞–≤–∏–ª ‚úÖ', {show_alert: false})
        await ctx.scene.leave('predlojka')
    } catch (e) {
        console.error(e);
    }
})

predlojka.action('predlojcancel', async ctx => {
    try {
        const db = await collection.findOne({user_id: ctx.from.id})
        await ctx.deleteMessage(ctx.callbackQuery.message.message_id)
        await ctx.replyWithPhoto('AgACAgIAAxkBAAIBQGRwpdUHgsO-VzXinFdsqtt53IflAAJcyzEb3-yIS8NvKBi2G2GKAQADAgADeAADLwQ', {caption: `–ü—Ä–∏–≤–µ—Ç, ${ctx.from.first_name}! –Ø –±–æ—Ç –ü–æ—Ç—ç–π—Ç–æ—Å–∞ ‚ú®\n\n–ï—Å–ª–∏ —É —Ç–µ–±—è –µ—Å—Ç—å –∫–∞–∫–∏–µ-—Ç–æ –≤–æ–ø—Ä–æ—Å—ã, –ø–æ–∂–µ–ª–∞–Ω–∏—è –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è - —Ç—ã –º–æ–∂–µ—à—å –æ–ø–∏—Å–∞—Ç—å –∏—Ö –∑–¥–µ—Å—å üí¨\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞üëáüèª`, reply_markup: {inline_keyboard: main_keyboards}})
        await ctx.answerCbQuery('–û—Ç–º–µ–Ω–µ–Ω–æ ‚úÖ', {show_alert: false})
        await ctx.scene.leave('predlojka')
    } catch (e) {
        console.error(e);
    }
})

const pxtatansw = new Scenes.BaseScene("pxtatansw");

pxtatansw.enter(async ctx => {
    try {
        return await ctx.reply('ü•î –í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –∫ –ø—Ä–µ–¥–ª–æ–∂–∫–µ: ')
    } catch (e) {
        console.error(e);
    }
})

pxtatansw.on('text', async ctx => {
    try {
        const db = await collection.findOne({user_id: ctx.from.id})
        try {
            await ctx.telegram.sendMessage(db.usertoansw, 'üü¢ –ü–æ—Ç–∞—Ç–∞ –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ –≤–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ:')
            await ctx.telegram.copyMessage(db.usertoansw, ctx.chat.id, ctx.message.message_id) 
        } catch (e) {
            console.log('');
        }
        await collection.findOneAndUpdate({user_id: db.usertoansw}, {$set: {predsend: 'none'}})
        await ctx.reply('–û—Ç–ø—Ä–∞–≤–∏–ª ‚úÖ', {reply_markup: {inline_keyboard: [[Markup.button.callback('‚èÆ –í –º–µ–Ω—é', 'backtomnscenes')]]}})
        await ctx.scene.leave('pxtatansw')
    } catch (e) {
        console.error(e);
    }
})

const reklam = new Scenes.BaseScene("reklam");

reklam.enter(async ctx => {
    try {
        await collection.findOneAndUpdate({user_id: ctx.from.id}, {$set: {reklam_link: 'null', skipad: 'null', reklam_tzmsg: 'null', reklam_tzfile: 'null', reklam_alrtext: 'null', reklam_date: 'null', waitingforfile: false}})
        return await ctx.reply('üîó –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ä–µ–∫–ª–∞–º–∏—Ä—É–µ–º—ã–π –ø—Ä–æ–µ–∫—Ç: ', {reply_markup: {keyboard: [['–û—Ç–º–µ–Ω–∏—Ç—å üî¥']], resize_keyboard: true}})
    } catch (e) {
        console.error(e);
    }
})

reklam.on('text', async ctx => {
    try {
        if (ctx.message.text == '–û—Ç–º–µ–Ω–∏—Ç—å üî¥') {
            await ctx.reply('–û—Ç–º–µ–Ω–µ–Ω–æ ‚úÖ', {reply_markup: {remove_keyboard: true}})
            await ctx.replyWithPhoto('AgACAgIAAxkBAAIBQGRwpdUHgsO-VzXinFdsqtt53IflAAJcyzEb3-yIS8NvKBi2G2GKAQADAgADeAADLwQ', {caption: `–ü—Ä–∏–≤–µ—Ç, ${ctx.from.first_name}! –Ø –±–æ—Ç –ü–æ—Ç—ç–π—Ç–æ—Å–∞ ‚ú®\n\n–ï—Å–ª–∏ —É —Ç–µ–±—è –µ—Å—Ç—å –∫–∞–∫–∏–µ-—Ç–æ –≤–æ–ø—Ä–æ—Å—ã, –ø–æ–∂–µ–ª–∞–Ω–∏—è –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è - —Ç—ã –º–æ–∂–µ—à—å –æ–ø–∏—Å–∞—Ç—å –∏—Ö –∑–¥–µ—Å—å üí¨\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞üëáüèª`, reply_markup: {inline_keyboard: main_keyboards}})
            return ctx.scene.leave('reklam')
        }
        await ctx.reply('–í–Ω–æ—à—É –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∞–Ω–∫–µ—Ç—É üîÑ', {reply_markup: {remove_keyboard: true}})
        await collection.findOneAndUpdate({user_id: ctx.from.id}, {$set: {reklam_link: `${ctx.message.text}`}})
        await ctx.scene.enter('reklam_st2')
    } catch (e) {
        console.error(e);
    }
})

const reklam_st2 = new Scenes.BaseScene("reklam_st2");

reklam_st2.enter(async ctx => {
    try {
        return await ctx.reply('‚úçÔ∏è –†–∞–∑–≤–µ—Ä–Ω—É—Ç–æ –æ–ø–∏—à–∏—Ç–µ –≤–∞—à –ø—Ä–æ–µ–∫—Ç –∏–ª–∏ –ø—Ä–æ–¥—É–∫—Ü–∏—é, –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –¢–ó:', {reply_markup: {keyboard: [['–û—Ç–º–µ–Ω–∏—Ç—å üî¥']], resize_keyboard: true}})
    } catch (e) {
        console.error(e);
    }
})

reklam_st2.on('text', async ctx => {
    try {
        const db = await collection.findOne({user_id: ctx.from.id})
        if (ctx.message.text == '–û—Ç–º–µ–Ω–∏—Ç—å üî¥') {
            try {
                await ctx.deleteMessage(db.skipad)   
            } catch (e) {
                console.log('log id r_2 deleting');
            }
            await ctx.reply('–û—Ç–º–µ–Ω–µ–Ω–æ ‚úÖ', {reply_markup: {remove_keyboard: true}})
            await ctx.replyWithPhoto('AgACAgIAAxkBAAIBQGRwpdUHgsO-VzXinFdsqtt53IflAAJcyzEb3-yIS8NvKBi2G2GKAQADAgADeAADLwQ', {caption: `–ü—Ä–∏–≤–µ—Ç, ${ctx.from.first_name}! –Ø –±–æ—Ç –ü–æ—Ç—ç–π—Ç–æ—Å–∞ ‚ú®\n\n–ï—Å–ª–∏ —É —Ç–µ–±—è –µ—Å—Ç—å –∫–∞–∫–∏–µ-—Ç–æ –≤–æ–ø—Ä–æ—Å—ã, –ø–æ–∂–µ–ª–∞–Ω–∏—è –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è - —Ç—ã –º–æ–∂–µ—à—å –æ–ø–∏—Å–∞—Ç—å –∏—Ö –∑–¥–µ—Å—å üí¨\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞üëáüèª`, reply_markup: {inline_keyboard: main_keyboards}})
            return ctx.scene.leave('reklam_st2')
        }
        if(db.reklam_tzmsg != 'null') return

        const skipad = await ctx.reply('–í—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–∞–π–ª—ã –∫ –æ–ø–∏—Å–∞–Ω–∏—é?', {reply_markup: {inline_keyboard: [[Markup.button.callback('–î–æ–±–∞–≤–∏—Ç—å —Ñ–∞–π–ª ‚ûï', 'addfile')], [Markup.button.callback('–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ ‚è©', 'skipaddfile')]]}})
        await collection.findOneAndUpdate({user_id: ctx.from.id}, {$set: {skipad: skipad.message_id, reklam_tzmsg: ctx.message.text, reklam_tzfile: []}})
    } catch (e) {
        console.error(e);
    }
})

reklam_st2.on('document', async ctx => {
    try {
        const db = await collection.findOne({user_id: ctx.from.id})
        if(db.waitingforfile == false) return
        await collection.findOneAndUpdate({user_id: ctx.from.id}, {$push: {reklam_tzfile: ctx.message.document.file_id}})
        await collection.findOneAndUpdate({user_id: ctx.from.id}, {$set: {waitingforfile: false}})
        const skipad = await ctx.reply('* –ï—Å–ª–∏ –≤—ã –≥—Ä—É–ø–ø–∏—Ä—É–µ—Ç–µ —Ñ–∞–π–ª—ã, —Ç–æ —è –≤–æ–∑—å–º—É —Ç–æ–ª—å–∫–æ —Å–∞–º—ã–π –ø–µ—Ä–≤—ã–π —Ñ–∞–π–ª! –ß—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —ç—Ç–æ–≥–æ –¥–æ–±–∞–≤–ª—è–π—Ç–µ —Ñ–∞–π–ª—ã –ø–æ –æ—Ç–¥–µ–ª—å–Ω–æ—Å—Ç—å—é ‚ÄºÔ∏è\n\n–î–æ–±–∞–≤–∏—Ç–µ –µ—â—ë?', {reply_markup: {inline_keyboard: [[Markup.button.callback('–î–æ–±–∞–≤–∏—Ç—å —Ñ–∞–π–ª ‚ûï', 'addfile')], [Markup.button.callback('–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ ‚è©', 'skipaddfile')]]}})
    } catch (e) {
        console.error(e);
    }
})

reklam_st2.action('addfile', async ctx => {
    try {
        await ctx.deleteMessage(ctx.callbackQuery.message.message_id)
        await collection.findOneAndUpdate({user_id: ctx.from.id}, {$set: {waitingforfile: true}})
        await ctx.reply('–°–∫–∏–Ω—å—Ç–µ —Ñ–∞–π–ª –±–µ–∑ —Å–∂–∞—Ç–∏—è:')
        await ctx.answerCbQuery()
    } catch (e) {
        console.error(e);
    }
})

reklam_st2.action('skipaddfile', async ctx => {
    try {
        await ctx.deleteMessage(ctx.callbackQuery.message.message_id)
        await ctx.reply('–í–Ω–æ—à—É –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∞–Ω–∫–µ—Ç—É üîÑ', {reply_markup: {remove_keyboard: true}})
        await ctx.scene.enter('reklam_st3')
        await ctx.answerCbQuery()
    } catch (e) {
        console.error(e);
    }
})

const reklam_st3 = new Scenes.BaseScene("reklam_st3");

reklam_st3.enter(async ctx => {
    try {
        return await ctx.reply('üí¨ –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å —É–∂–µ –≥–æ—Ç–æ–≤—ã–π —Ä–µ–∫–ª–∞–º–Ω—ã–π —Ç–µ–∫—Å—Ç, –Ω–∞–ø–∏—à–∏—Ç–µ –µ–≥–æ –∑–¥–µ—Å—å, –∞ –µ—Å–ª–∏ –Ω–µ—Ç, —Ç–æ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ "–ù–µ—Ç":', {reply_markup: {keyboard: [['–û—Ç–º–µ–Ω–∏—Ç—å üî¥']], resize_keyboard: true}})
    } catch (e) {
        console.error(e);
    }
})

reklam_st3.on('text', async ctx => {
    try {
        if (ctx.message.text == '–û—Ç–º–µ–Ω–∏—Ç—å üî¥') {
            await ctx.reply('–û—Ç–º–µ–Ω–µ–Ω–æ ‚úÖ', {reply_markup: {remove_keyboard: true}})
            await ctx.replyWithPhoto('AgACAgIAAxkBAAIBQGRwpdUHgsO-VzXinFdsqtt53IflAAJcyzEb3-yIS8NvKBi2G2GKAQADAgADeAADLwQ', {caption: `–ü—Ä–∏–≤–µ—Ç, ${ctx.from.first_name}! –Ø –±–æ—Ç –ü–æ—Ç—ç–π—Ç–æ—Å–∞ ‚ú®\n\n–ï—Å–ª–∏ —É —Ç–µ–±—è –µ—Å—Ç—å –∫–∞–∫–∏–µ-—Ç–æ –≤–æ–ø—Ä–æ—Å—ã, –ø–æ–∂–µ–ª–∞–Ω–∏—è –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è - —Ç—ã –º–æ–∂–µ—à—å –æ–ø–∏—Å–∞—Ç—å –∏—Ö –∑–¥–µ—Å—å üí¨\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞üëáüèª`, reply_markup: {inline_keyboard: main_keyboards}})
            return ctx.scene.leave('reklam_st3')
        }
        await ctx.reply('–í–Ω–æ—à—É –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∞–Ω–∫–µ—Ç—É üîÑ', {reply_markup: {remove_keyboard: true}})
        await collection.findOneAndUpdate({user_id: ctx.from.id}, {$set: {reklam_alrtext: `${ctx.message.text}`}})
        await ctx.scene.enter('reklam_st4')
    } catch (e) {
        console.error(e);
    }
})

const regex = /^(0[1-9]|[12][0-9]|3[01])\:(0[1-9]|1[0-2])\:\d{4}$/;

function isValidDateFormat(dateString) {
  return regex.test(dateString);
}

const reklam_st4 = new Scenes.BaseScene("reklam_st4");

reklam_st4.enter(async ctx => {
    try {
        return await ctx.reply('üïö –£–∫–∞–∂–∏—Ç–µ –ø–ª–∞–Ω–∏—Ä—É–µ–º—É—é –¥–∞—Ç—É –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Ä–µ–∫–ª–∞–º—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ (DD:MM:YYYY):', {reply_markup: {keyboard: [['–û—Ç–º–µ–Ω–∏—Ç—å üî¥']], resize_keyboard: true}})
    } catch (e) {
        console.error(e);
    }
})

reklam_st4.on('text', async ctx => {
    try {
        if (ctx.message.text == '–û—Ç–º–µ–Ω–∏—Ç—å üî¥') {
            await ctx.reply('–û—Ç–º–µ–Ω–µ–Ω–æ ‚úÖ', {reply_markup: {remove_keyboard: true}})
            await ctx.replyWithPhoto('AgACAgIAAxkBAAIBQGRwpdUHgsO-VzXinFdsqtt53IflAAJcyzEb3-yIS8NvKBi2G2GKAQADAgADeAADLwQ', {caption: `–ü—Ä–∏–≤–µ—Ç, ${ctx.from.first_name}! –Ø –±–æ—Ç –ü–æ—Ç—ç–π—Ç–æ—Å–∞ ‚ú®\n\n–ï—Å–ª–∏ —É —Ç–µ–±—è –µ—Å—Ç—å –∫–∞–∫–∏–µ-—Ç–æ –≤–æ–ø—Ä–æ—Å—ã, –ø–æ–∂–µ–ª–∞–Ω–∏—è –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è - —Ç—ã –º–æ–∂–µ—à—å –æ–ø–∏—Å–∞—Ç—å –∏—Ö –∑–¥–µ—Å—å üí¨\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞üëáüèª`, reply_markup: {inline_keyboard: main_keyboards}})
            return ctx.scene.leave('reklam_st4')
        }
        if(isValidDateFormat(ctx.message.text) == false) return ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ (DD:MM:YYYY), –≥–¥–µ:\nDD - –¥–µ–Ω—å\nMM - –º–µ—Å—è—Ü\nYYYY - –≥–æ–¥')
        await ctx.reply('–í–Ω–æ—à—É –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∞–Ω–∫–µ—Ç—É üîÑ', {reply_markup: {remove_keyboard: true}})
        await collection.findOneAndUpdate({user_id: ctx.from.id}, {$set: {reklam_date: `${ctx.message.text}`}})
        if(!ctx.from.username) return ctx.scene.enter('reklam_st5')
            
        // –û—Ç–ø—Ä–∞–∫–∞ –ø–æ—Ç–µ–π—Ç–æ—Å—É .........
        const db = await collection.findOne({user_id: ctx.from.id})
        if(db.reklam_tzmsg != 'null' && db.reklam_tzfile.length != 0) {
            if(db.reklam_tzfile.length > 1) {
                await ctx.tg.sendMessage(1031267639, `üü¢ –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–∫–ª–∞–º—É:\n\n<b>–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞:</b> ${db.reklam_type}\n<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> ${db.user_name}\n<b>C—Å—ã–ª–∫–∞ –Ω–∞ —Ä–µ–∫–ª–∞–º–∏—Ä—É–µ–º—ã–π –ø—Ä–æ–µ–∫—Ç:</b> ${db.reklam_link}\n<b>–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –∏ –¢–ó:</b> <code>${db.reklam_tzmsg}</code>\n<b>–†–µ–∫–ª–∞–º–Ω—ã–π —Ç–µ–∫—Å—Ç:</b> <code>${db.reklam_alrtext}</code>\n<b>–ñ–µ–ª–∞–µ–º–∞—è –¥–∞—Ç–∞:</b> <code>${db.reklam_date}</code>\n\n–ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –Ω–∏–∂–µ ‚¨áÔ∏è`, {reply_markup: {inline_keyboard: [[Markup.button.url('–°—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è üë§', `https://t.me/${db.user_name.replace('@', '')}`)]]}, parse_mode: 'HTML'})
                let arr = []
                for (let i = 0; i < db.reklam_tzfile.length; i++) {
                    arr.push({type: 'document', media: db.reklam_tzfile[i]})
                }
                await ctx.tg.sendMediaGroup(1031267639, arr)
            }else {
                await ctx.tg.sendDocument(1031267639, db.reklam_tzfile[0], {caption: `üü¢ –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–∫–ª–∞–º—É:\n\n<b>–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞:</b> ${db.reklam_type}\n<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> ${db.user_name}\n<b>C—Å—ã–ª–∫–∞ –Ω–∞ —Ä–µ–∫–ª–∞–º–∏—Ä—É–µ–º—ã–π –ø—Ä–æ–µ–∫—Ç:</b> ${db.reklam_link}\n<b>–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –∏ –¢–ó:</b> <code>${db.reklam_tzmsg}</code>\n<b>–†–µ–∫–ª–∞–º–Ω—ã–π —Ç–µ–∫—Å—Ç:</b> <code>${db.reklam_alrtext}</code>\n<b>–ñ–µ–ª–∞–µ–º–∞—è –¥–∞—Ç–∞:</b> <code>${db.reklam_date}</code>`, reply_markup: {inline_keyboard: [[Markup.button.url('–°—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è üë§', `https://t.me/${db.user_name.replace('@', '')}`)]]}, parse_mode: 'HTML'})
            }
        }else {
            await ctx.tg.sendMessage(1031267639, `üü¢ –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–∫–ª–∞–º—É:\n\n<b>–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞:</b> ${db.reklam_type}\n<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> ${db.user_name}\n<b>C—Å—ã–ª–∫–∞ –Ω–∞ —Ä–µ–∫–ª–∞–º–∏—Ä—É–µ–º—ã–π –ø—Ä–æ–µ–∫—Ç:</b> ${db.reklam_link}\n<b>–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –∏ –¢–ó:</b> <code>${db.reklam_tzmsg}</code>\n<b>–†–µ–∫–ª–∞–º–Ω—ã–π —Ç–µ–∫—Å—Ç:</b> <code>${db.reklam_alrtext}</code>\n<b>–ñ–µ–ª–∞–µ–º–∞—è –¥–∞—Ç–∞:</b> <code>${db.reklam_date}</code>`, {reply_markup: {inline_keyboard: [[Markup.button.url('–°—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è üë§', `https://t.me/${db.user_name.replace('@', '')}`)]]}, parse_mode: 'HTML'})
        }
        
        await ctx.reply('–í–∞—à–∞ –∑–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ ‚úÖ\n\n–° –≤–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏–π –∑–∞—è–≤–∫–∏ ‚úçÔ∏è', {reply_markup: {inline_keyboard: [[Markup.button.callback('‚èÆ –í –º–µ–Ω—é', 'backtomnscenes')]]}})
        await ctx.scene.leave('reklam_st4')
    } catch (e) {
        console.error(e);
    }
})

const reklam_st5 = new Scenes.BaseScene("reklam_st5");

reklam_st5.enter(async ctx => {
    try {
        await ctx.reply('üë§ –î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã —Å –≤–∞–º–∏ —Å–º–æ–≥–ª–∏ —Å–≤—è–∑–∞—Ç—å—Å—è, –≤–∞–º –Ω—É–∂–Ω–æ –ø–æ—Å—Ç–∞–≤–∏—Ç—å —é—Ä–µ–∑–Ω–µ–π–º –∏ –Ω–µ —É–¥–∞–ª—è—Ç—å(–∏–∑–º–µ–Ω—è—Ç—å) –µ–≥–æ –¥–æ —Ç–µ—Ö –ø–æ—Ä, –ø–æ–∫–∞ –≤–∞–º –Ω–µ –æ—Ç–≤–µ—Ç—è—Ç, –Ω–æ –µ—Å–ª–∏ –≤—Å–µ—Ç–∞–∫–∏ –≤—ã —Å–¥–µ–ª–∞–µ—Ç–µ —ç—Ç–æ, —Ç–æ —Å –≤–∞–º–∏ –Ω–∏–∫—Ç–æ –Ω–µ —Å–≤—è–∂–µ—Ç—Å—è‚ÄºÔ∏è\n\n–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –Ω–∏–∂–µ:', {reply_markup: {inline_keyboard: [[Markup.button.callback('–ü—Ä–æ–≤–µ—Ä–∏—Ç—å üîç', 'chekusernm')]]}})
        return await ctx.replyWithMediaGroup([{type: 'photo', media: 'AgACAgIAAxkBAAIBXWRySbC2c3ztwBjT-EJk8GeDwcqnAALNyDEbmlaQS7YiW9qqWzDJAQADAgADeAADLwQ'}, {type: 'photo', media: 'AgACAgIAAxkBAAIBXmRySfQq51-izYu-s4AzuFJtA79dAALOyDEbmlaQSyMgq8IjbXc_AQADAgADeAADLwQ'}, {type: 'photo', media: 'AgACAgIAAxkBAAIEEWR0lPyRTacB3dnzuSofKaenVwO6AAIRyDEbo8egSzhghsxyKuiYAQADAgADeAADLwQ'}])
    } catch (e) {
        console.error(e);
    }
})

reklam_st5.on('text', async ctx => {
    try {
        await ctx.reply('–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—ã—à–µ ‚¨ÜÔ∏è')
    } catch (e) {
        console.error(e);
    }
})

reklam_st5.action('chekusernm', async ctx => {
    try {
        if(!ctx.from.username) return ctx.answerCbQuery('–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –Ω–µ –≤–∏–∂—É –∏–∑–º–µ–Ω–µ–Ω–∏–π üòï\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –≤—Å–µ –ø–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏.', {show_alert: true})
        await collection.findOneAndUpdate({user_id: ctx.from.id}, {$set: {user_name: `@${ctx.from.username}`}})
        await ctx.deleteMessage(ctx.callbackQuery.message.message_id)
        await ctx.answerCbQuery('üëå')
        const db = await collection.findOne({user_id: ctx.from.id})
        if(db.reklam_tzmsg != 'null' && db.reklam_tzfile.length != 0) {
            if(db.reklam_tzfile.length > 1) {
                await ctx.tg.sendMessage(1031267639, `üü¢ –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–∫–ª–∞–º—É:\n\n<b>–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞:</b> ${db.reklam_type}\n<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> ${db.user_name}\n<b>C—Å—ã–ª–∫–∞ –Ω–∞ —Ä–µ–∫–ª–∞–º–∏—Ä—É–µ–º—ã–π –ø—Ä–æ–µ–∫—Ç:</b> ${db.reklam_link}\n<b>–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –∏ –¢–ó:</b> <code>${db.reklam_tzmsg}</code>\n<b>–†–µ–∫–ª–∞–º–Ω—ã–π —Ç–µ–∫—Å—Ç:</b> <code>${db.reklam_alrtext}</code>\n<b>–ñ–µ–ª–∞–µ–º–∞—è –¥–∞—Ç–∞:</b> <code>${db.reklam_date}</code>\n\n–ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –Ω–∏–∂–µ ‚¨áÔ∏è`, {reply_markup: {inline_keyboard: [[Markup.button.url('–°—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è üë§', `https://t.me/${db.user_name.replace('@', '')}`)]]}, parse_mode: 'HTML'})
                let arr = []
                for (let i = 0; i < db.reklam_tzfile.length; i++) {
                    arr.push({type: 'document', media: db.reklam_tzfile[i]})
                }
                await ctx.tg.sendMediaGroup(1031267639, arr)
            }else {
                await ctx.tg.sendDocument(1031267639, db.reklam_tzfile[0], {caption: `üü¢ –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–∫–ª–∞–º—É:\n\n<b>–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞:</b> ${db.reklam_type}\n<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> ${db.user_name}\n<b>C—Å—ã–ª–∫–∞ –Ω–∞ —Ä–µ–∫–ª–∞–º–∏—Ä—É–µ–º—ã–π –ø—Ä–æ–µ–∫—Ç:</b> ${db.reklam_link}\n<b>–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –∏ –¢–ó:</b> <code>${db.reklam_tzmsg}</code>\n<b>–†–µ–∫–ª–∞–º–Ω—ã–π —Ç–µ–∫—Å—Ç:</b> <code>${db.reklam_alrtext}</code>\n<b>–ñ–µ–ª–∞–µ–º–∞—è –¥–∞—Ç–∞:</b> <code>${db.reklam_date}</code>`, reply_markup: {inline_keyboard: [[Markup.button.url('–°—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è üë§', `https://t.me/${db.user_name.replace('@', '')}`)]]}, parse_mode: 'HTML'})
            }
        }else {
            await ctx.tg.sendMessage(1031267639, `üü¢ –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–∫–ª–∞–º—É:\n\n<b>–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞:</b> ${db.reklam_type}\n<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> ${db.user_name}\n<b>C—Å—ã–ª–∫–∞ –Ω–∞ —Ä–µ–∫–ª–∞–º–∏—Ä—É–µ–º—ã–π –ø—Ä–æ–µ–∫—Ç:</b> ${db.reklam_link}\n<b>–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –∏ –¢–ó:</b> <code>${db.reklam_tzmsg}</code>\n<b>–†–µ–∫–ª–∞–º–Ω—ã–π —Ç–µ–∫—Å—Ç:</b> <code>${db.reklam_alrtext}</code>\n<b>–ñ–µ–ª–∞–µ–º–∞—è –¥–∞—Ç–∞:</b> <code>${db.reklam_date}</code>`, {reply_markup: {inline_keyboard: [[Markup.button.url('–°—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è üë§', `https://t.me/${db.user_name.replace('@', '')}`)]]}, parse_mode: 'HTML'})
        }

        await ctx.reply('–í–∞—à–∞ –∑–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ ‚úÖ\n\n–° –≤–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏–π –∑–∞—è–≤–∫–∏ ‚úçÔ∏è', {reply_markup: {inline_keyboard: [[Markup.button.callback('‚èÆ –í –º–µ–Ω—é', 'backtomnscenes')]]}})
        await ctx.scene.leave('reklam_st5')
    } catch (e) {
        console.error(e);
    }
})

const svedfold_scene = new Scenes.BaseScene("svedfold_scene");

svedfold_scene.enter(async ctx => {
    try {
        await collection.findOneAndUpdate({user_id: ctx.from.id}, {$set: {sved_tz: 'null', user_instruct: false}})
        return await ctx.reply('‚úçÔ∏è –ü–æ–¥—Ä–æ–±–Ω–æ –æ–ø–∏—à–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç. –ü–æ—Å—Ç–∞—Ä–∞–π—Ç–µ—Å—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ –æ–ø–∏—Å–∞—Ç—å –¢–ó:', {reply_markup: {keyboard: [['–û—Ç–º–µ–Ω–∏—Ç—å üî¥']], resize_keyboard: true}})
    } catch (e) {
        console.error(e);
    }
})

svedfold_scene.on('text', async ctx => {
    try {
        const db = await collection.findOne({user_id: ctx.from.id})
        if(db.sved_tz != 'null') return
        if (ctx.message.text == '–û—Ç–º–µ–Ω–∏—Ç—å üî¥') {
            await ctx.reply('–û—Ç–º–µ–Ω–µ–Ω–æ ‚úÖ', {reply_markup: {remove_keyboard: true}})
            await ctx.replyWithPhoto('AgACAgIAAxkBAAIBQGRwpdUHgsO-VzXinFdsqtt53IflAAJcyzEb3-yIS8NvKBi2G2GKAQADAgADeAADLwQ', {caption: `–ü—Ä–∏–≤–µ—Ç, ${ctx.from.first_name}! –Ø –±–æ—Ç –ü–æ—Ç—ç–π—Ç–æ—Å–∞ ‚ú®\n\n–ï—Å–ª–∏ —É —Ç–µ–±—è –µ—Å—Ç—å –∫–∞–∫–∏–µ-—Ç–æ –≤–æ–ø—Ä–æ—Å—ã, –ø–æ–∂–µ–ª–∞–Ω–∏—è –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è - —Ç—ã –º–æ–∂–µ—à—å –æ–ø–∏—Å–∞—Ç—å –∏—Ö –∑–¥–µ—Å—å üí¨\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞üëáüèª`, reply_markup: {inline_keyboard: main_keyboards}})
            return ctx.scene.leave('svedfold_scene')
        }
        await ctx.reply('–û–±—Ä–∞–±–æ—Ç–∫–∞...', {reply_markup: {remove_keyboard: true}})
        await collection.findOneAndUpdate({user_id: ctx.from.id}, {$set: {sved_tz: ctx.message.text}})
        await ctx.reply('üü° –í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å?', {reply_to_message_id: ctx.message.message_id, reply_markup: {inline_keyboard: [[Markup.button.callback('–î–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–π üü¢', 'ysved'), Markup.button.callback('–ù–µ—Ç, –æ—Ç–º–µ–Ω–∏—Ç—å üî¥', 'nsved')], [Markup.button.callback('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å üìù', 'esved')]]}})
    } catch (e) {
        console.error(e);
    }
})

svedfold_scene.action('ysved', async ctx => {
    try {
        await ctx.deleteMessage(ctx.callbackQuery.message.message_id)
        const db = await collection.findOne({user_id: ctx.from.id})
        if(!ctx.from.username) {
            await ctx.answerCbQuery()
            if(db.user_instruct == false) {
                await ctx.reply('–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã PXTATXES —Å–º–æ–≥ —Å –≤–∞–º–∏ —Å–≤—è–∑–∞—Ç—å—Å—è, –≤–∞–º –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç —Å–æ–∑–¥–∞—Ç—å —é–∑–µ—Ä–Ω–µ–π–º –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –∞–∫–∞—É–Ω—Ç–∞ –∏ –Ω–µ —É–±–∏—Ä–∞—Ç—å –µ–≥–æ, –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã PXTATES —Å–º–æ–≥ —Å –≤–∞–º–∏ —Å–≤—è–∑–∞—Ç—å—Å—è!\n\n–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –Ω–∏–∂–µ:')
                await collection.findOneAndUpdate({user_id: ctx.from.id}, {$set: {user_instruct: true}})
                return await ctx.replyWithMediaGroup([{type: 'photo', media: 'AgACAgIAAxkBAAIBXWRySbC2c3ztwBjT-EJk8GeDwcqnAALNyDEbmlaQS7YiW9qqWzDJAQADAgADeAADLwQ'}, {type: 'photo', media: 'AgACAgIAAxkBAAIBXmRySfQq51-izYu-s4AzuFJtA79dAALOyDEbmlaQSyMgq8IjbXc_AQADAgADeAADLwQ'}, {type: 'photo', media: 'AgACAgIAAxkBAAIEEWR0lPyRTacB3dnzuSofKaenVwO6AAIRyDEbo8egSzhghsxyKuiYAQADAgADeAADLwQ'}])
            }
            return await ctx.reply('–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã PXTATXES —Å–º–æ–≥ —Å –≤–∞–º–∏ —Å–≤—è–∑–∞—Ç—å—Å—è, –≤–∞–º –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –ø–æ—Å—Ç–∞–≤–∏—Ç—å —é–∑–µ—Ä–Ω–µ–π–º –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –∞–∫–∞—É–Ω—Ç–∞ –∏ –Ω–µ —É–±–∏—Ä–∞—Ç—å –µ–≥–æ, –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã PXTATES —Å–º–æ–≥ —Å –≤–∞–º–∏ —Å–≤—è–∑–∞—Ç—å—Å—è!\n\n–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –≤—ã—à–µ ‚¨ÜÔ∏è')
        }
        await collection.findOneAndUpdate({user_id: ctx.from.id}, {$set: {user_name: `@${ctx.from.username}`}})
        const dbcommit = await collection.findOne({user_id: ctx.from.id})
        await ctx.tg.sendMessage(1031267639, `üü¢ –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞: <b>${dbcommit.uslug_type}</b>\n\n<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> ${dbcommit.user_name}\n<b>–ò–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:</b> ${dbcommit.sved_tz}`, {parse_mode: 'HTML', reply_markup: {inline_keyboard: [[Markup.button.url('–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è üë§', `https://t.me/${dbcommit.user_name.replace('@', '')}`)]]}})
        await ctx.reply('–í–∞—à–∞ –∑–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ ‚úÖ\n\n–° –≤–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏–π –∑–∞—è–≤–∫–∏ ‚úçÔ∏è', {reply_markup: {inline_keyboard: [[Markup.button.callback('‚èÆ –í –º–µ–Ω—é', 'backtomnscenes')]]}})
        await ctx.scene.leave('svedfold_scene')
        await ctx.answerCbQuery()
    } catch (e) {
        console.error(e);
    }
})

svedfold_scene.action('nsved', async ctx => {
    try {
        await ctx.deleteMessage(ctx.callbackQuery.message.message_id)
        await ctx.replyWithPhoto('AgACAgIAAxkBAAIBQGRwpdUHgsO-VzXinFdsqtt53IflAAJcyzEb3-yIS8NvKBi2G2GKAQADAgADeAADLwQ', {caption: `–ü—Ä–∏–≤–µ—Ç, ${ctx.from.first_name}! –Ø –±–æ—Ç –ü–æ—Ç—ç–π—Ç–æ—Å–∞ ‚ú®\n\n–ï—Å–ª–∏ —É —Ç–µ–±—è –µ—Å—Ç—å –∫–∞–∫–∏–µ-—Ç–æ –≤–æ–ø—Ä–æ—Å—ã, –ø–æ–∂–µ–ª–∞–Ω–∏—è –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è - —Ç—ã –º–æ–∂–µ—à—å –æ–ø–∏—Å–∞—Ç—å –∏—Ö –∑–¥–µ—Å—å üí¨\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞üëáüèª`, reply_markup: {inline_keyboard: main_keyboards}})
        ctx.scene.leave('svedfold_scene')
        await ctx.answerCbQuery('–û—Ç–º–µ–Ω–µ–Ω–æ ‚úÖ')
    } catch (e) {
        console.error(e);
    }
})

svedfold_scene.action('esved', async ctx => {
    try {
        await ctx.deleteMessage(ctx.callbackQuery.message.message_id)
        await ctx.scene.enter('svedfold_scene')
        await ctx.answerCbQuery()
    } catch (e) {
        console.error(e);
    }
})

const beatfold_spisscene = new Scenes.BaseScene("beatfold_spisscene");

beatfold_spisscene.enter(async ctx => {
    try {
        await collection.findOneAndUpdate({user_id: ctx.from.id}, {$set: {beatfrspis: 'null', user_instruct: false}})
        await ctx.reply('–°–ø–∏—Å–æ–∫ –±–∏—Ç–æ–≤ ‚¨áÔ∏è', {reply_markup: {keyboard: [['–û—Ç–º–µ–Ω–∏—Ç—å üî¥']], resize_keyboard: true}})
        return await ctx.reply('üéπ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–µ–≥–æ –±–∏—Ç–∞:', {reply_markup: {inline_keyboard: [[Markup.button.url('–û—Ç–∫—Ä—ã—Ç—å —Å–ø–∏—Å–æ–∫ –±–∏—Ç–æ–≤ üóÇÔ∏è', 'https://t.me/pxtatxess')]]}})
    } catch (e) {
        console.error(e);
    }
})

beatfold_spisscene.on('text', async ctx => {
    try {
        const db = await collection.findOne({user_id: ctx.from.id})
        if(db.beatfrspis != 'null') return
        if (ctx.message.text == '–û—Ç–º–µ–Ω–∏—Ç—å üî¥') {
            await ctx.reply('–û—Ç–º–µ–Ω–µ–Ω–æ ‚úÖ', {reply_markup: {remove_keyboard: true}})
            await ctx.replyWithPhoto('AgACAgIAAxkBAAIBQGRwpdUHgsO-VzXinFdsqtt53IflAAJcyzEb3-yIS8NvKBi2G2GKAQADAgADeAADLwQ', {caption: `–ü—Ä–∏–≤–µ—Ç, ${ctx.from.first_name}! –Ø –±–æ—Ç –ü–æ—Ç—ç–π—Ç–æ—Å–∞ ‚ú®\n\n–ï—Å–ª–∏ —É —Ç–µ–±—è –µ—Å—Ç—å –∫–∞–∫–∏–µ-—Ç–æ –≤–æ–ø—Ä–æ—Å—ã, –ø–æ–∂–µ–ª–∞–Ω–∏—è –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è - —Ç—ã –º–æ–∂–µ—à—å –æ–ø–∏—Å–∞—Ç—å –∏—Ö –∑–¥–µ—Å—å üí¨\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞üëáüèª`, reply_markup: {inline_keyboard: main_keyboards}})
            return ctx.scene.leave('beatfold_spisscene')
        }
        await ctx.reply('–û–±—Ä–∞–±–æ—Ç–∫–∞...', {reply_markup: {remove_keyboard: true}})
        await collection.findOneAndUpdate({user_id: ctx.from.id}, {$set: {beatfrspis: ctx.message.text}})
        await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥ –ª–∏—Ü–µ–Ω–∑–∏–∏:', {reply_to_message_id: ctx.message.message_id, reply_markup: {inline_keyboard: lisenziya}})
    } catch (e) {
        console.error(e);
    }
})

beatfold_spisscene.action('arendawav', async ctx => {
    try {
        const db = await collection.findOne({user_id: ctx.from.id})
        if(!ctx.from.username) {
            await ctx.answerCbQuery()
            if(db.user_instruct == false) {
                await ctx.reply('–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã PXTATXES —Å–º–æ–≥ —Å –≤–∞–º–∏ —Å–≤—è–∑–∞—Ç—å—Å—è, –≤–∞–º –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç —Å–æ–∑–¥–∞—Ç—å —é–∑–µ—Ä–Ω–µ–π–º –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –∞–∫–∞—É–Ω—Ç–∞ –∏ –Ω–µ —É–±–∏—Ä–∞—Ç—å –µ–≥–æ, –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã PXTATES —Å–º–æ–≥ —Å –≤–∞–º–∏ —Å–≤—è–∑–∞—Ç—å—Å—è!\n\n–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –Ω–∏–∂–µ:')
                await collection.findOneAndUpdate({user_id: ctx.from.id}, {$set: {user_instruct: true}})
                return await ctx.replyWithMediaGroup([{type: 'photo', media: 'AgACAgIAAxkBAAIBXWRySbC2c3ztwBjT-EJk8GeDwcqnAALNyDEbmlaQS7YiW9qqWzDJAQADAgADeAADLwQ'}, {type: 'photo', media: 'AgACAgIAAxkBAAIBXmRySfQq51-izYu-s4AzuFJtA79dAALOyDEbmlaQSyMgq8IjbXc_AQADAgADeAADLwQ'}, {type: 'photo', media: 'AgACAgIAAxkBAAIEEWR0lPyRTacB3dnzuSofKaenVwO6AAIRyDEbo8egSzhghsxyKuiYAQADAgADeAADLwQ'}])
            }
            return await ctx.reply('–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã PXTATXES —Å–º–æ–≥ —Å –≤–∞–º–∏ —Å–≤—è–∑–∞—Ç—å—Å—è, –≤–∞–º –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –ø–æ—Å—Ç–∞–≤–∏—Ç—å —é–∑–µ—Ä–Ω–µ–π–º –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –∞–∫–∞—É–Ω—Ç–∞ –∏ –Ω–µ —É–±–∏—Ä–∞—Ç—å –µ–≥–æ, –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã PXTATES —Å–º–æ–≥ —Å –≤–∞–º–∏ —Å–≤—è–∑–∞—Ç—å—Å—è!\n\n–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –≤—ã—à–µ ‚¨ÜÔ∏è')
        }
        await ctx.deleteMessage(ctx.callbackQuery.message.message_id)
        await collection.findOneAndUpdate({user_id: ctx.from.id}, {$set: {lic: '–ê—Ä–µ–Ω–¥–∞ Wav', user_name: `@${ctx.from.username}`}})
        const dbcommit = await collection.findOne({user_id: ctx.from.id})
        await ctx.tg.sendMessage(1031267639, `üü¢ –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞: <b>${dbcommit.uslug_type}</b>\n\n<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> ${dbcommit.user_name}\n<b>–ù–∞–∑–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–µ–≥–æ –±–∏—Ç–∞:</b> ${dbcommit.beatfrspis}\n<b>–¢–∏–ø –ª–∏—Ü–µ–Ω–∑–∏–∏:</b> ${dbcommit.lic}`, {parse_mode: 'HTML', reply_markup: {inline_keyboard: [[Markup.button.url('–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è üë§', `https://t.me/${dbcommit.user_name.replace('@', '')}`)]]}})
        await ctx.reply('–í–∞—à–∞ –∑–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ ‚úÖ\n\n–° –≤–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏–π –∑–∞—è–≤–∫–∏ ‚úçÔ∏è', {reply_markup: {inline_keyboard: [[Markup.button.callback('‚èÆ –í –º–µ–Ω—é', 'backtomnscenes')]]}})
        await ctx.scene.leave('beatfold_spisscene')
    } catch (e) {
        console.error(e);
    }
})
 
beatfold_spisscene.action('wptrackout', async ctx => {
    try {
        const db = await collection.findOne({user_id: ctx.from.id})
        if(!ctx.from.username) {
            await ctx.answerCbQuery()
            if(db.user_instruct == false) {
                await ctx.reply('–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã PXTATXES —Å–º–æ–≥ —Å –≤–∞–º–∏ —Å–≤—è–∑–∞—Ç—å—Å—è, –≤–∞–º –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç —Å–æ–∑–¥–∞—Ç—å —é–∑–µ—Ä–Ω–µ–π–º –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –∞–∫–∞—É–Ω—Ç–∞ –∏ –Ω–µ —É–±–∏—Ä–∞—Ç—å –µ–≥–æ, –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã PXTATES —Å–º–æ–≥ —Å –≤–∞–º–∏ —Å–≤—è–∑–∞—Ç—å—Å—è!\n\n–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –Ω–∏–∂–µ:')
                await collection.findOneAndUpdate({user_id: ctx.from.id}, {$set: {user_instruct: true}})
                return await ctx.replyWithMediaGroup([{type: 'photo', media: 'AgACAgIAAxkBAAIBXWRySbC2c3ztwBjT-EJk8GeDwcqnAALNyDEbmlaQS7YiW9qqWzDJAQADAgADeAADLwQ'}, {type: 'photo', media: 'AgACAgIAAxkBAAIBXmRySfQq51-izYu-s4AzuFJtA79dAALOyDEbmlaQSyMgq8IjbXc_AQADAgADeAADLwQ'}, {type: 'photo', media: 'AgACAgIAAxkBAAIEEWR0lPyRTacB3dnzuSofKaenVwO6AAIRyDEbo8egSzhghsxyKuiYAQADAgADeAADLwQ'}])
            }
            return await ctx.reply('–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã PXTATXES —Å–º–æ–≥ —Å –≤–∞–º–∏ —Å–≤—è–∑–∞—Ç—å—Å—è, –≤–∞–º –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –ø–æ—Å—Ç–∞–≤–∏—Ç—å —é–∑–µ—Ä–Ω–µ–π–º –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –∞–∫–∞—É–Ω—Ç–∞ –∏ –Ω–µ —É–±–∏—Ä–∞—Ç—å –µ–≥–æ, –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã PXTATES —Å–º–æ–≥ —Å –≤–∞–º–∏ —Å–≤—è–∑–∞—Ç—å—Å—è!\n\n–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –≤—ã—à–µ ‚¨ÜÔ∏è')
        }
        await ctx.deleteMessage(ctx.callbackQuery.message.message_id)
        await collection.findOneAndUpdate({user_id: ctx.from.id}, {$set: {lic: 'Wav + Trackout', user_name: `@${ctx.from.username}`}})
        const dbcommit = await collection.findOne({user_id: ctx.from.id})
        await ctx.tg.sendMessage(1031267639, `üü¢ –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞: <b>${dbcommit.uslug_type}</b>\n\n<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> ${dbcommit.user_name}\n<b>–ù–∞–∑–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–µ–≥–æ –±–∏—Ç–∞:</b> ${dbcommit.beatfrspis}\n<b>–¢–∏–ø –ª–∏—Ü–µ–Ω–∑–∏–∏:</b> ${dbcommit.lic}`, {parse_mode: 'HTML', reply_markup: {inline_keyboard: [[Markup.button.url('–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è üë§', `https://t.me/${dbcommit.user_name.replace('@', '')}`)]]}})
        await ctx.reply('–í–∞—à–∞ –∑–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ ‚úÖ\n\n–° –≤–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏–π –∑–∞—è–≤–∫–∏ ‚úçÔ∏è', {reply_markup: {inline_keyboard: [[Markup.button.callback('‚èÆ –í –º–µ–Ω—é', 'backtomnscenes')]]}})
        await ctx.scene.leave('beatfold_spisscene')
    } catch (e) {
        console.error(e);
    }
})
 
beatfold_spisscene.action('exclusive', async ctx => {
    try {
        const db = await collection.findOne({user_id: ctx.from.id})
        if(!ctx.from.username) {
            await ctx.answerCbQuery()
            if(db.user_instruct == false) {
                await ctx.reply('–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã PXTATXES —Å–º–æ–≥ —Å –≤–∞–º–∏ —Å–≤—è–∑–∞—Ç—å—Å—è, –≤–∞–º –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç —Å–æ–∑–¥–∞—Ç—å —é–∑–µ—Ä–Ω–µ–π–º –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –∞–∫–∞—É–Ω—Ç–∞ –∏ –Ω–µ —É–±–∏—Ä–∞—Ç—å –µ–≥–æ, –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã PXTATES —Å–º–æ–≥ —Å –≤–∞–º–∏ —Å–≤—è–∑–∞—Ç—å—Å—è!\n\n–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –Ω–∏–∂–µ:')
                await collection.findOneAndUpdate({user_id: ctx.from.id}, {$set: {user_instruct: true}})
                return await ctx.replyWithMediaGroup([{type: 'photo', media: 'AgACAgIAAxkBAAIBXWRySbC2c3ztwBjT-EJk8GeDwcqnAALNyDEbmlaQS7YiW9qqWzDJAQADAgADeAADLwQ'}, {type: 'photo', media: 'AgACAgIAAxkBAAIBXmRySfQq51-izYu-s4AzuFJtA79dAALOyDEbmlaQSyMgq8IjbXc_AQADAgADeAADLwQ'}, {type: 'photo', media: 'AgACAgIAAxkBAAIEEWR0lPyRTacB3dnzuSofKaenVwO6AAIRyDEbo8egSzhghsxyKuiYAQADAgADeAADLwQ'}])
            }
            return await ctx.reply('–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã PXTATXES —Å–º–æ–≥ —Å –≤–∞–º–∏ —Å–≤—è–∑–∞—Ç—å—Å—è, –≤–∞–º –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –ø–æ—Å—Ç–∞–≤–∏—Ç—å —é–∑–µ—Ä–Ω–µ–π–º –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –∞–∫–∞—É–Ω—Ç–∞ –∏ –Ω–µ —É–±–∏—Ä–∞—Ç—å –µ–≥–æ, –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã PXTATES —Å–º–æ–≥ —Å –≤–∞–º–∏ —Å–≤—è–∑–∞—Ç—å—Å—è!\n\n–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –≤—ã—à–µ ‚¨ÜÔ∏è')
        }
        await ctx.deleteMessage(ctx.callbackQuery.message.message_id)
        await collection.findOneAndUpdate({user_id: ctx.from.id}, {$set: {lic: '–≠–∫—Å–∫–ª—é–∑–∏–≤–Ω–∞—è –ª–∏—Ü–µ–Ω–∑–∏—è', user_name: `@${ctx.from.username}`}})
        const dbcommit = await collection.findOne({user_id: ctx.from.id})
        await ctx.tg.sendMessage(1031267639, `üü¢ –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞: <b>${dbcommit.uslug_type}</b>\n\n<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> ${dbcommit.user_name}\n<b>–ù–∞–∑–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–µ–≥–æ –±–∏—Ç–∞:</b> ${dbcommit.beatfrspis}\n<b>–¢–∏–ø –ª–∏—Ü–µ–Ω–∑–∏–∏:</b> ${dbcommit.lic}`, {parse_mode: 'HTML', reply_markup: {inline_keyboard: [[Markup.button.url('–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è üë§', `https://t.me/${dbcommit.user_name.replace('@', '')}`)]]}})
        await ctx.reply('–í–∞—à–∞ –∑–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ ‚úÖ\n\n–° –≤–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏–π –∑–∞—è–≤–∫–∏ ‚úçÔ∏è', {reply_markup: {inline_keyboard: [[Markup.button.callback('‚èÆ –í –º–µ–Ω—é', 'backtomnscenes')]]}})
        await ctx.scene.leave('beatfold_spisscene')
    } catch (e) {
        console.error(e);
    }
})
 
beatfold_spisscene.action('cancspis', async ctx => {
    try {
        await ctx.deleteMessage(ctx.callbackQuery.message.message_id)
        await ctx.reply('–û—Ç–º–µ–Ω–µ–Ω–æ ‚úÖ')
        await ctx.replyWithPhoto('AgACAgIAAxkBAAIBQGRwpdUHgsO-VzXinFdsqtt53IflAAJcyzEb3-yIS8NvKBi2G2GKAQADAgADeAADLwQ', {caption: `–ü—Ä–∏–≤–µ—Ç, ${ctx.from.first_name}! –Ø –±–æ—Ç –ü–æ—Ç—ç–π—Ç–æ—Å–∞ ‚ú®\n\n–ï—Å–ª–∏ —É —Ç–µ–±—è –µ—Å—Ç—å –∫–∞–∫–∏–µ-—Ç–æ –≤–æ–ø—Ä–æ—Å—ã, –ø–æ–∂–µ–ª–∞–Ω–∏—è –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è - —Ç—ã –º–æ–∂–µ—à—å –æ–ø–∏—Å–∞—Ç—å –∏—Ö –∑–¥–µ—Å—å üí¨\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞üëáüèª`, reply_markup: {inline_keyboard: main_keyboards}})
        await ctx.scene.leave('beatfold_spisscene')
        await ctx.answerCbQuery()
    } catch (e) {
        console.error(e);
    }
})

const beatfold_beatscene = new Scenes.BaseScene("beatfold_beatscene");

beatfold_beatscene.enter(async ctx => {
    try {
        await collection.findOneAndUpdate({user_id: ctx.from.id}, {$set: {beattype: 'null'}})
        return await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–µ–≥–æ —Ç–∞–π–ø–∞:', {reply_markup: {keyboard: [['–û—Ç–º–µ–Ω–∏—Ç—å üî¥']], resize_keyboard: true}})
    } catch (e) {
        console.error(e);
    }
})

beatfold_beatscene.on('text', async ctx => {
    try {
        if (ctx.message.text == '–û—Ç–º–µ–Ω–∏—Ç—å üî¥') {
            await ctx.reply('–û—Ç–º–µ–Ω–µ–Ω–æ ‚úÖ', {reply_markup: {remove_keyboard: true}})
            await ctx.replyWithPhoto('AgACAgIAAxkBAAIBQGRwpdUHgsO-VzXinFdsqtt53IflAAJcyzEb3-yIS8NvKBi2G2GKAQADAgADeAADLwQ', {caption: `–ü—Ä–∏–≤–µ—Ç, ${ctx.from.first_name}! –Ø –±–æ—Ç –ü–æ—Ç—ç–π—Ç–æ—Å–∞ ‚ú®\n\n–ï—Å–ª–∏ —É —Ç–µ–±—è –µ—Å—Ç—å –∫–∞–∫–∏–µ-—Ç–æ –≤–æ–ø—Ä–æ—Å—ã, –ø–æ–∂–µ–ª–∞–Ω–∏—è –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è - —Ç—ã –º–æ–∂–µ—à—å –æ–ø–∏—Å–∞—Ç—å –∏—Ö –∑–¥–µ—Å—å üí¨\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞üëáüèª`, reply_markup: {inline_keyboard: main_keyboards}})
            return ctx.scene.leave('beatfold_beatscene')
        }
        await ctx.reply('–í–Ω–æ—à—É –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∞–Ω–∫–µ—Ç—É üîÑÔ∏è', {reply_markup: {remove_keyboard: true}})
        await collection.findOneAndUpdate({user_id: ctx.from.id}, {$set: {beattype: ctx.message.text}})
     await ctx.scene.enter('beatfold_beatscene_st2')
    } catch (e) {
        console.error(e);
    }
})

const beatfold_beatscene_st2 = new Scenes.BaseScene("beatfold_beatscene_st2");

beatfold_beatscene_st2.enter(async ctx => {
    try {
        await collection.findOneAndUpdate({user_id: ctx.from.id}, {$set: {beatscrtz: 'null', waitforfilebeat: false, beattzfiles: []}})
        return await ctx.reply('üìå –û–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è –∫ –±–∏—Ç—É –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ: –º–æ–∂–µ—Ç–µ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –ø—Ä–∏–º–µ—Ä—ã —Ä–∞–±–æ—Ç, –Ω–∞ —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —á—Ç–æ–±—ã –±–∏—Ç –±—ã–ª –ø–æ—Ö–æ–∂, –æ–ø–∏—à–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –∏ —Ç–µ–º–ø –∏ —Ç.–¥\n\n–ß–µ–º –±–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤—ã –æ–ø–∏—à–∏—Ç–µ, —Ç–µ–º —Ç–æ—á–Ω–µ–µ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç', {reply_markup: {keyboard: [['–û—Ç–º–µ–Ω–∏—Ç—å üî¥']], resize_keyboard: true}})
    } catch (e) {
        console.error(e);
    }
})

beatfold_beatscene_st2.on('audio', async ctx => {
    const db = await collection.findOne({user_id: ctx.from.id})
    if(db.waitforfilebeat == true) {
        await collection.findOneAndUpdate({user_id: ctx.from.id}, {$set: {waitforfilebeat: false}, $push: {beattzfiles: ctx.message.audio.file_id}})
        await ctx.reply('–î–æ–±–∞–≤–∏–ª ‚úÖ')
        return await ctx.reply('–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â—ë?', {reply_markup: {inline_keyboard: [[Markup.button.callback('–î–æ–±–∞–≤–∏—Ç—å ‚ûï', 'addbetfile')], [Markup.button.callback('–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–Ω–∫–µ–Ω—Ç—É üü¢', 'sendbeattz')]]}})
    }
    await ctx.reply('–° –Ω–∞—á–∞–ª–æ –æ–ø–∏—à–∏—Ç–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è –∫ –±–∏—Ç—É, –∞ –ø–æ—Ç–æ–º —Å–º–æ–∂–µ—Ç–µ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–∞–π–ª:')
})

beatfold_beatscene_st2.on('text', async ctx => {
    try {
        const db = await collection.findOne({user_id: ctx.from.id})
        if(db.beatscrtz != 'null') return
        if (ctx.message.text == '–û—Ç–º–µ–Ω–∏—Ç—å üî¥') {
            await ctx.reply('–û—Ç–º–µ–Ω–µ–Ω–æ ‚úÖ', {reply_markup: {remove_keyboard: true}})
            await ctx.replyWithPhoto('AgACAgIAAxkBAAIBQGRwpdUHgsO-VzXinFdsqtt53IflAAJcyzEb3-yIS8NvKBi2G2GKAQADAgADeAADLwQ', {caption: `–ü—Ä–∏–≤–µ—Ç, ${ctx.from.first_name}! –Ø –±–æ—Ç –ü–æ—Ç—ç–π—Ç–æ—Å–∞ ‚ú®\n\n–ï—Å–ª–∏ —É —Ç–µ–±—è –µ—Å—Ç—å –∫–∞–∫–∏–µ-—Ç–æ –≤–æ–ø—Ä–æ—Å—ã, –ø–æ–∂–µ–ª–∞–Ω–∏—è –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è - —Ç—ã –º–æ–∂–µ—à—å –æ–ø–∏—Å–∞—Ç—å –∏—Ö –∑–¥–µ—Å—å üí¨\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞üëáüèª`, reply_markup: {inline_keyboard: main_keyboards}})
            return ctx.scene.leave('beatfold_beatscene_st2')
        }
        await ctx.reply('–í–Ω–æ—à—É –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∞–Ω–∫–µ—Ç—É üîÑÔ∏è', {reply_markup: {remove_keyboard: true}})
        await collection.findOneAndUpdate({user_id: ctx.from.id}, {$set: {beatscrtz: ctx.message.text}})
        await ctx.reply('–•–æ—Ç–∏—Ç–µ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–∞–π–ª—ã –∫ –≤–∞—à–µ–π –∞–Ω–∫–µ—Ç–µ?', {reply_markup: {inline_keyboard: [[Markup.button.callback('–î–æ–±–∞–≤–∏—Ç—å ‚ûï', 'addbetfile')], [Markup.button.callback('–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–Ω–∫–µ–Ω—Ç—É üü¢', 'sendbeattz')]]}})
    } catch (e) {
        console.error(e);
    }
})

beatfold_beatscene_st2.action('addbetfile', async ctx => {
    try {
        await ctx.deleteMessage(ctx.callbackQuery.message.message_id)
        await collection.findOneAndUpdate({user_id: ctx.from.id}, {$set: {waitforfilebeat: true}})
        await ctx.reply('–°–∫–∏–Ω—å—Ç–µ —Ñ–∞–π–ª:')
    } catch (e) {
        console.error(e);
    }
})

beatfold_beatscene_st2.action('sendbeattz', async ctx => {
    try {
        const db = await collection.findOne({user_id: ctx.from.id})
        if(!ctx.from.username) {
            await ctx.answerCbQuery()
            if(db.user_instruct == false) {
                await ctx.reply('–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã PXTATXES —Å–º–æ–≥ —Å –≤–∞–º–∏ —Å–≤—è–∑–∞—Ç—å—Å—è, –≤–∞–º –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç —Å–æ–∑–¥–∞—Ç—å —é–∑–µ—Ä–Ω–µ–π–º –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –∞–∫–∞—É–Ω—Ç–∞ –∏ –Ω–µ —É–±–∏—Ä–∞—Ç—å –µ–≥–æ, –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã PXTATES —Å–º–æ–≥ —Å –≤–∞–º–∏ —Å–≤—è–∑–∞—Ç—å—Å—è!\n\n–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –Ω–∏–∂–µ:')
                await collection.findOneAndUpdate({user_id: ctx.from.id}, {$set: {user_instruct: true}})
                return await ctx.replyWithMediaGroup([{type: 'photo', media: 'AgACAgIAAxkBAAIBXWRySbC2c3ztwBjT-EJk8GeDwcqnAALNyDEbmlaQS7YiW9qqWzDJAQADAgADeAADLwQ'}, {type: 'photo', media: 'AgACAgIAAxkBAAIBXmRySfQq51-izYu-s4AzuFJtA79dAALOyDEbmlaQSyMgq8IjbXc_AQADAgADeAADLwQ'}, {type: 'photo', media: 'AgACAgIAAxkBAAIEEWR0lPyRTacB3dnzuSofKaenVwO6AAIRyDEbo8egSzhghsxyKuiYAQADAgADeAADLwQ'}])
            }
            return await ctx.reply('–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã PXTATXES —Å–º–æ–≥ —Å –≤–∞–º–∏ —Å–≤—è–∑–∞—Ç—å—Å—è, –≤–∞–º –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –ø–æ—Å—Ç–∞–≤–∏—Ç—å —é–∑–µ—Ä–Ω–µ–π–º –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –∞–∫–∞—É–Ω—Ç–∞ –∏ –Ω–µ —É–±–∏—Ä–∞—Ç—å –µ–≥–æ, –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã PXTATES —Å–º–æ–≥ —Å –≤–∞–º–∏ —Å–≤—è–∑–∞—Ç—å—Å—è!\n\n–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –≤—ã—à–µ ‚¨ÜÔ∏è')
        }
        await collection.findOneAndUpdate({user_id: ctx.from.id}, {$set: {user_name: `@${ctx.from.username}`}})
        await ctx.deleteMessage(ctx.callbackQuery.message.message_id)
        const dbcommit = await collection.findOne({user_id: ctx.from.id})
        if(dbcommit.beattzfiles.length > 1) {
            await ctx.tg.sendMessage(1031267639, `–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞: ${dbcommit.uslug_type}\n\n<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> ${dbcommit.user_name}\n<b>ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b> <code>${dbcommit.user_id}</code>\n<b>Beat type:</b> <code>${dbcommit.beattype}</code>\n<b>–ü–æ–∂–µ–ª–∞–Ω–∏—è –∫ –±–∏—Ç—É:</b> <code>${dbcommit.beatscrtz}</code>\n\n–ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –Ω–∏–∂–µ ‚¨áÔ∏è`, {parse_mode: 'HTML', reply_markup: {inline_keyboard: [[Markup.button.url('–û—Ç–∫—Ä—ã—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è üë§', `https://t.me/${dbcommit.user_name.replace('@', '')}`)]]}})
            let arr = []
            for (let i = 0; i < db.beattzfiles.length; i++) {
                arr.push({type: 'audio', media: db.beattzfiles[i]})
            }
            await ctx.tg.sendMediaGroup(1031267639, arr)
        }else if(dbcommit.beattzfiles.length == 1) {
            await ctx.tg.sendAudio(1031267639, dbcommit.beattzfiles[0], {caption: `–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞: ${dbcommit.uslug_type}\n\n<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> ${dbcommit.user_name}\n<b>ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b> <code>${dbcommit.user_id}</code>\n<b>Beat type:</b> <code>${dbcommit.beattype}</code>\n<b>–ü–æ–∂–µ–ª–∞–Ω–∏—è –∫ –±–∏—Ç—É:</b> <code>${dbcommit.beatscrtz}</code>`, parse_mode: 'HTML', reply_markup: {inline_keyboard: [[Markup.button.url('–û—Ç–∫—Ä—ã—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è üë§', `https://t.me/${dbcommit.user_name.replace('@', '')}`)]]}})
        }else {
            ctx.tg.sendMessage(1031267639, `–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞: ${dbcommit.uslug_type}\n\n<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> ${dbcommit.user_name}\n<b>ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b> <code>${dbcommit.user_id}</code>\n<b>Beat type:</b> <code>${dbcommit.beattype}</code>\n<b>–ü–æ–∂–µ–ª–∞–Ω–∏—è –∫ –±–∏—Ç—É:</b> <code>${dbcommit.beatscrtz}</code>`, {parse_mode: 'HTML', reply_markup: {inline_keyboard: [[Markup.button.url('–û—Ç–∫—Ä—ã—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è üë§', `https://t.me/${dbcommit.user_name.replace('@', '')}`)]]}})
        }

        await ctx.reply('–í–∞—à–∞ –∑–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ ‚úÖ\n\n–° –≤–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏–π –∑–∞—è–≤–∫–∏ ‚úçÔ∏è', {reply_markup: {inline_keyboard: [[Markup.button.callback('‚èÆ –í –º–µ–Ω—é', 'backtomnscenes')]]}})
        await ctx.scene.leave('beatfold_beatscene_st2')
    } catch (e) {
        console.error(e);
    }
})
 
const stage = new Scenes.Stage([predlojka, pxtatansw, reklam, reklam_st2, reklam_st3, reklam_st4, reklam_st5, svedfold_scene, beatfold_spisscene, beatfold_beatscene, beatfold_beatscene_st2]);  
bot.use(session());
bot.use(stage.middleware());  

bot.start(async (ctx) => {
    try {
        if(ctx.scene.current != undefined) return
        await ctx.deleteMessage(ctx.message.message_id)
        const db = await collection.findOne({user_id: ctx.from.id})
        if(db == null) {
            await collection.insertOne({user_id: ctx.from.id, predsend: 'none', first_name: ctx.from.first_name, user_name: `@${ctx.from.username}` || '–ù–µ—Ç—É'})
            await collection.findOneAndUpdate({_id: new ObjectId('646f07782ec51704c9ff90bd')}, {$push: {users: ctx.from.id}})
        }
        await ctx.replyWithPhoto('AgACAgIAAxkBAAIBQGRwpdUHgsO-VzXinFdsqtt53IflAAJcyzEb3-yIS8NvKBi2G2GKAQADAgADeAADLwQ', {caption: `–ü—Ä–∏–≤–µ—Ç, ${ctx.from.first_name}! –Ø –±–æ—Ç –ü–æ—Ç—ç–π—Ç–æ—Å–∞ ‚ú®\n\n–ï—Å–ª–∏ —É —Ç–µ–±—è –µ—Å—Ç—å –∫–∞–∫–∏–µ-—Ç–æ –≤–æ–ø—Ä–æ—Å—ã, –ø–æ–∂–µ–ª–∞–Ω–∏—è –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è - —Ç—ã –º–æ–∂–µ—à—å –æ–ø–∏—Å–∞—Ç—å –∏—Ö –∑–¥–µ—Å—å üí¨\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞üëáüèª`, reply_markup: {inline_keyboard: main_keyboards}})
    } catch (e) {
        console.error(e);
    }
});

// bot.on('forward_date', async ctx => {
//     try {
//         console.log(ctx.update.message);
//     } catch (e) {
//         console.error(e);
//     }
// })

bot.help(async (ctx) => {
    try {
        if(ctx.scene.current != undefined) return
        await ctx.reply(`–Ø –±–æ—Ç –ü–æ—Ç—ç–π—Ç–æ—Å–∞ ‚ú®\n\n–ï—Å–ª–∏ —É —Ç–µ–±—è –µ—Å—Ç—å –∫–∞–∫–∏–µ-—Ç–æ –≤–æ–ø—Ä–æ—Å—ã, –ø–æ–∂–µ–ª–∞–Ω–∏—è –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è - —Ç—ã –º–æ–∂–µ—à—å –æ–ø–∏—Å–∞—Ç—å –∏—Ö –∑–¥–µ—Å—å üí¨`)  
    } catch (e) {
        console.error(e);
    }
});

bot.action('predloj', async ctx => {
    try {
        if(ctx.scene.current != undefined) return await ctx.answerCbQuery() 
        const db = await collection.findOne({user_id: ctx.from.id})
        if(db.predsend != "none") {
            return await ctx.answerCbQuery('–í—ã –Ω–µ —Å–º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –Ω–æ–≤—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –ø–æ–∫–∞ PXTATXES –Ω–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç –≤–∞—à–µ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ! –Ø —Å–æ–æ–±—â—É –≤–∞–º, –∫–∞–∫ —Ç–æ–ª—å–∫–æ –ø—Ä–µ–¥–ª–æ–∂–∫–∞ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞...', {show_alert: true})
        }
        await ctx.deleteMessage(ctx.callbackQuery.message.message_id)
        await ctx.answerCbQuery('–í—Ö–æ–¥ –≤ –ø—Ä–µ–¥–ª–æ–∂–∫—É üîÑ', {show_alert: false})
        await ctx.scene.enter('predlojka')
    } catch (e) {
        console.error(e);
    }
})

bot.action('idea', async ctx => {
    try {
        if(ctx.scene.current != undefined) return await ctx.answerCbQuery() 
        const db = await collection.findOne({user_id: ctx.from.id})
        if(db.predsend != "none") {
            return await ctx.answerCbQuery('–í—ã –Ω–µ —Å–º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –Ω–æ–≤—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –ø–æ–∫–∞ PXTATXES –Ω–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç –≤–∞—à–µ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ! –Ø —Å–æ–æ–±—â—É –≤–∞–º, –∫–∞–∫ —Ç–æ–ª—å–∫–æ –ø—Ä–µ–¥–ª–æ–∂–∫–∞ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞...', {show_alert: true})
        }
        await ctx.deleteMessage(ctx.callbackQuery.message.message_id)
        await ctx.answerCbQuery('–í—Ö–æ–¥ –≤ –ø—Ä–µ–¥–ª–æ–∂–∫—É üîÑ', {show_alert: false})
        await ctx.scene.enter('predlojka')
    } catch (e) {
        console.error(e);
    }
})

// –ü—Ä–µ–¥–ª–æ–∂–∫–∞(–æ—Ç–≤–µ—Ç):

bot.action('predlojsender', async ctx => {
    try {
        if(ctx.scene.current != undefined) return await ctx.answerCbQuery() 
        const usdb = await collection.findOne({predsend: ctx.callbackQuery.message.text.split(' ')[0].replace('#', '')})
        await ctx.editMessageText(`${usdb.predsend}# | –î–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è:\n\n<b>USER ID:</b> <code>${usdb.user_id}</code>\n<b>USER NAME:</b> <code>${usdb.first_name}</code>\n<b>USER NAME:</b> ${usdb.user_name}`, {reply_markup: {inline_keyboard: predloj_senderonv}, parse_mode: "HTML"})
        await ctx.answerCbQuery('–í–æ—Ç –µ–≥–æ –≥–æ–ª–æ–≤–∞)', {show_alert: false})
    } catch (e) {
        console.error(e);
    }
})

bot.action('predlojacanc', async ctx => {
    try {
        if(ctx.scene.current != undefined) return await ctx.answerCbQuery() 
        const db = await collection.findOneAndUpdate({predsend: ctx.callbackQuery.message.text.split(' ')[0].replace('#', '')}, {$set: {predsend: 'none'}})
        await ctx.deleteMessage(ctx.callbackQuery.message.message_id)
        await ctx.tg.sendMessage(db.value.user_id, 'üü¢ –ü—Ä–µ–¥–ª–æ–∂–∫–∞ –ø–æ—Ç–∞—Ç—ã —Å–Ω–æ–≤–∞ –¥–æ—Å—Ç—É–ø–Ω–∞!')
        await ctx.answerCbQuery('–ó–∞–∫—Ä—ã—Ç–æ ‚úÖ', {show_alert: false})
    } catch (e) {
        console.error(e);
    }
})

bot.action('predlojsenderback', async ctx => {
    try {
        if(ctx.scene.current != undefined) return await ctx.answerCbQuery() 
        const db = await collection.findOne({predsend: ctx.callbackQuery.message.text.split(' ')[0].replace('#', '')})
        await ctx.editMessageText(`${db.predsend}# | –°–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–µ–¥–ª–æ–∂–∫–∏:\n<i>${db.predmsg}</i>`, {reply_markup: {inline_keyboard: predloj_senderinfo}, parse_mode: "HTML"})
        await ctx.answerCbQuery('–í–µ—Ä–Ω—É–ª ‚úÖ', {show_alert: false})
    } catch (e) {
        console.error(e);
    }
})

bot.action('predlojanswer', async ctx => {
    try {
        if(ctx.scene.current != undefined) return await ctx.answerCbQuery() 
        const db = await collection.findOne({predsend: ctx.callbackQuery.message.text.split(' ')[0].replace('#', '')})
        await collection.findOneAndUpdate({user_id: ctx.from.id}, {$set: {usertoansw: db.user_id}})
        await ctx.deleteMessage(ctx.callbackQuery.message.message_id)
        await ctx.scene.enter('pxtatansw')
        await ctx.answerCbQuery('–ó–∞–≥—Ä—É–∂–∞—é...', {show_alert: false})
    } catch (e) {
        console.error(e);
    }
})

bot.action('links', async ctx => {
    try {
        if(ctx.scene.current != undefined) return await ctx.answerCbQuery() 
        await ctx.editMessageCaption('–ó–¥–µ—Å—å —Å–æ–±—Ä–∞–Ω—ã —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å–æ—Ü.—Å–µ—Ç–∏:', {reply_markup: {inline_keyboard: links}})
        await ctx.answerCbQuery()
    } catch (e) {
        console.error(e);
    }
})

bot.action('zakaz_uslug', async ctx => {
    try {
        if(ctx.scene.current != undefined) return await ctx.answerCbQuery() 
        await ctx.editMessageCaption('üõ† –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –≤–∞—Å —É—Å–ª—É–≥—É:', {reply_markup: {inline_keyboard: uslugi_keyboards}})
        await ctx.answerCbQuery()
    } catch (e) {
        console.error(e);
    }
})

bot.action('uslug_svedmaster', async ctx => {
    try {
        if(ctx.scene.current != undefined) return await ctx.answerCbQuery() 
        await ctx.editMessageCaption('üõ† –í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É:', {reply_markup: {inline_keyboard: uslug_svedm_keyboards}})
        await ctx.answerCbQuery()
    } catch (e) {
        console.error(e);
    }
})

bot.action('uslug_svedfold_svedm', async ctx => {
    try {
        if(ctx.scene.current != undefined) return await ctx.answerCbQuery() 
        await ctx.deleteMessage(ctx.callbackQuery.message.message_id)
        await collection.findOneAndUpdate({user_id: ctx.from.id}, {$set: {uslug_type: '–°–≤–µ–¥–µ–Ω–∏–µ –∏ –ú–∞—Å—Ç–µ—Ä–∏–Ω–≥ üõ†'}})
        await ctx.scene.enter('svedfold_scene')
        await ctx.answerCbQuery()
    } catch (e) {
        console.error(e);
    }
})

bot.action('uslug_svedfold_vocalsett', async ctx => {
    try {
        if(ctx.scene.current != undefined) return await ctx.answerCbQuery() 
        await ctx.deleteMessage(ctx.callbackQuery.message.message_id)
        await collection.findOneAndUpdate({user_id: ctx.from.id}, {$set: {uslug_type: '–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∫–∞–ª–∞ üéôÔ∏è'}})
        await ctx.scene.enter('svedfold_scene')
        await ctx.answerCbQuery()
    } catch (e) {
        console.error(e);
    }
})

bot.action('uslug_svedfold_beatscorr', async ctx => {
    try {
        if(ctx.scene.current != undefined) return await ctx.answerCbQuery() 
        await ctx.deleteMessage(ctx.callbackQuery.message.message_id)
        await collection.findOneAndUpdate({user_id: ctx.from.id}, {$set: {uslug_type: '–ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –±–∏—Ç–∞ üéπ'}})
        await ctx.scene.enter('svedfold_scene')
        await ctx.answerCbQuery()
    } catch (e) {
        console.error(e);
    }
})

bot.action('uslug_beatsfold_spisbeat', async ctx => {
    try {
        if(ctx.scene.current != undefined) return await ctx.answerCbQuery() 
        await ctx.deleteMessage(ctx.callbackQuery.message.message_id)
        await collection.findOneAndUpdate({user_id: ctx.from.id}, {$set: {uslug_type: '–ö—É–ø–∏—Ç—å –±–∏—Ç –∏–∑ —Å–ø–∏—Å–∫–∞ üéπ'}})
        await ctx.scene.enter('beatfold_spisscene')
        await ctx.answerCbQuery()
    } catch (e) {
        console.error(e);
    }
})

bot.action('uslug_beatsfold_zakazbeat', async ctx => {
    try {
        if(ctx.scene.current != undefined) return await ctx.answerCbQuery() 
        await ctx.deleteMessage(ctx.callbackQuery.message.message_id)
        await collection.findOneAndUpdate({user_id: ctx.from.id}, {$set: {uslug_type: '–°–æ–∑–¥–∞–Ω–∏–µ –±–∏—Ç–∞ —Å –Ω—É–ª—è üõ†'}})
        await ctx.scene.enter('beatfold_beatscene')
        await ctx.answerCbQuery()
    } catch (e) {
        console.error(e);
    }
})

bot.action('uslug_beats', async ctx => {
    try {
        if(ctx.scene.current != undefined) return await ctx.answerCbQuery() 
        await ctx.editMessageCaption('üõ† –í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É:', {reply_markup: {inline_keyboard: uslug_beats_keyboards}})
        await ctx.answerCbQuery()
    } catch (e) {
        console.error(e);
    }
})

bot.action('uslug_beatsfold_info', async ctx => {
    try {
        if(ctx.scene.current != undefined) return await ctx.answerCbQuery() 
        await ctx.deleteMessage(ctx.callbackQuery.message.message_id)
        await ctx.reply(beatsinfo, {reply_markup: {inline_keyboard: [[Markup.button.callback('‚è™ –ù–∞–∑–∞–¥', 'backtobeatsfold')]]}})
        await ctx.answerCbQuery()
    } catch (e) {
        console.error(e);
    }
})

bot.action('uslug_svedfold_info', async ctx => {
    try {
        if(ctx.scene.current != undefined) return await ctx.answerCbQuery() 
        await ctx.editMessageMedia({type: 'photo', media: 'AgACAgIAAxkBAAIECmR0eQN8YlmmJ7brTgZbfBnXVRfVAAKexzEbo8egS5NdZfKVAAFk6AEAAwIAA3kAAy8E', caption: svedinfo}, {reply_markup: {inline_keyboard: [[Markup.button.callback('‚è™ –ù–∞–∑–∞–¥', 'backtosvedfold')]]}})
        await ctx.answerCbQuery()
    } catch (e) {
        console.error(e);
    }
})

bot.action('uslug_none', async ctx => {
    try {
        if(ctx.scene.current != undefined) return await ctx.answerCbQuery() 
        await ctx.editMessageCaption('üõ† –ò–∑–≤–∏–Ω–∏—Ç–µ, –ø–æ–∫–∞ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–æ')
        setTimeout(async () => {
            await ctx.editMessageCaption('üõ† –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –≤–∞—Å —É—Å–ª—É–≥—É:', {reply_markup: {inline_keyboard: uslugi_keyboards}})
        }, 2000);
        await ctx.answerCbQuery()
    } catch (e) {
        console.error(e);
    }
})

bot.action('donat', async ctx => {
    try {
        if(ctx.scene.current != undefined) return await ctx.answerCbQuery() 
        await ctx.editMessageCaption('–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –∂–µ–ª–∞–Ω–∏–µ –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –º–æ–π –∫–∞–Ω–∞–ª, –≤–æ—Ç —Å—Å—ã–ª–∫–∞ –Ω–∞ –ø–ª–æ—â–∞–¥–∫–∏ –¥–ª—è –¥–æ–Ω–∞—Ç–æ–≤üëáüèª', {reply_markup: {inline_keyboard: dlinks}})
        await ctx.answerCbQuery()
    } catch (e) {
        console.error(e);
    }
})

bot.action('videodkits', async ctx => {
    try {
        if(ctx.scene.current != undefined) return await ctx.answerCbQuery() 
        await ctx.editMessageCaption('üìÇ –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –ø–∞–∫:', {reply_markup: {inline_keyboard: vpacks}})
        await ctx.answerCbQuery()
    } catch (e) {
        console.error(e);
    }
})

bot.action('dkit', async ctx => {
    try {
        if(ctx.scene.current != undefined) return await ctx.answerCbQuery() 
        await ctx.editMessageCaption('ü•Å –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä–∞–º–∫–∏—Ç:', {reply_markup: {inline_keyboard: pxtpacks}})
        await ctx.answerCbQuery()
    } catch (e) {
        console.error(e);
    }
})

bot.action('zakaz_reklamu', async ctx => {
    try {
        if(ctx.scene.current != undefined) return await ctx.answerCbQuery() 
        await ctx.editMessageCaption('üìà –î–ª—è –∑–∞–∫–∞–∑–∞ —Ä–µ–∫–ª–∞–º–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –∞–Ω–∫–µ—Ç—É\n\n–†–µ–∫–ª–∞–º–∞ –Ω–∞ –∫–∞–∫–æ–π –ø–ª–æ—â–∞–¥–∫–µ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?', {reply_markup: {inline_keyboard: reklam_keyboards}})
        await ctx.answerCbQuery()
    } catch (e) {
        console.error(e);
    }
})
bot.action('ytreklam', async ctx => {
    try {
        if(ctx.scene.current != undefined) return await ctx.answerCbQuery() 
        await collection.findOneAndUpdate({user_id: ctx.from.id}, {$set: {reklam_type: 'YT'}})
        await ctx.deleteMessage(ctx.callbackQuery.message.message_id)
        await ctx.scene.enter('reklam')
        await ctx.answerCbQuery()
    } catch (e) {
        console.error(e);
    }
})
bot.action('tgreklam', async ctx => {
    try {
        if(ctx.scene.current != undefined) return await ctx.answerCbQuery() 
        await collection.findOneAndUpdate({user_id: ctx.from.id}, {$set: {reklam_type: 'TG'}})
        await ctx.deleteMessage(ctx.callbackQuery.message.message_id)
        await ctx.scene.enter('reklam')
        await ctx.answerCbQuery()
    } catch (e) {
        console.error(e);
    }
})
bot.action('vkreklam', async ctx => {
    try {
        if(ctx.scene.current != undefined) return await ctx.answerCbQuery() 
        await collection.findOneAndUpdate({user_id: ctx.from.id}, {$set: {reklam_type: 'VK'}})
        await ctx.deleteMessage(ctx.callbackQuery.message.message_id)
        await ctx.scene.enter('reklam')
        await ctx.answerCbQuery()
    } catch (e) {
        console.error(e);
    }
})

bot.action('buykit', async ctx => {
    try {
        if(ctx.scene.current != undefined) return await ctx.answerCbQuery() 
        await ctx.answerCbQuery('–ö—É–ø–∏–ª —Ç–∏–ø–æ')
    } catch (e) {
        console.error(e);
    }
})

bot.action('secretdkit', async ctx => {
    try {
        if(ctx.scene.current != undefined) return await ctx.answerCbQuery() 
        await collection.findOneAndUpdate({user_id: ctx.from.id}, {$set: {drumclicked: 'helper'}})
        await ctx.editMessageMedia({type: 'photo', media: 'AgACAgIAAxkBAAIBVGRws9I-Zb_hQyM4tXXP6FaqWkp2AAK5yzEb3-yIS4KElcDr2GiqAQADAgADeQADLwQ', caption: 'üìã <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>\n\n<b>–î—Ä–∞–º –ø–∞–∫ —Å–æ–¥–µ—Ä–∂–∏—Ç:</b>\n808s - 32\nBass - 21\nClaps - 27\nCrash - 17\nFXs - 34\nHi-Hats - 20\nKicks - 20\nOne Shots - 50\nMIDIs - 239\nOpen-Hats - 18\nPercs & Rims - 25\nProjects - 2\nSnaps - 9\nSnares - 27\n\n–í —ç—Ç–æ–º –¥—Ä–∞–º –∫–∏—Ç–µ —Å–æ–±—Ä–∞–Ω–æ –º–Ω–æ–∂–µ—Å—Ç–≤–æ —Å–∞–º—ã—Ö –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö –∏ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∑–≤—É–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –∏—Å–ø–æ–ª—å–∑—É—é –ø—Ä–∏ –Ω–∞–ø–∏—Å–∞–Ω–∏–∏ —Å–≤–æ–∏—Ö —Ä–∞–±–æ—Ç, –∞ —Ç–∞–∫–∂–µ –∏—Å–ø–æ–ª—å–∑—É—é –≤ —Ä–æ–ª–∏–∫–∞—Ö –Ω–∞ –∫–∞–Ω–∞–ª–µ\n\n<b>–î–∞–Ω–Ω—ã–π –¥—Ä–∞–º –∫–∏—Ç –ø–æ–¥–æ–π–¥–µ—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±–∏—Ç–æ–≤ –≤ –∂–∞–Ω—Ä–µ: </b>Trap | Hyperpop | Jersey Club | Drill | Rage | Glitchcore | Dariacore | SuperTrap | Alien –∏ –º–Ω–æ–≥–∏—Ö –¥—Ä—É–≥–∏—Ö  –í–µ—Å - 1–≥–±\n\nüí∞ <b>–¶–µ–Ω–∞: 600 —Ä—É–±.</b>', parse_mode: 'HTML'}, {reply_markup: {inline_keyboard: bpxtpacks}})
        await ctx.answerCbQuery()
    } catch (e) {
        console.error(e);
    }
})

bot.action('helpermdkit', async ctx => {
    try {
        if(ctx.scene.current != undefined) return await ctx.answerCbQuery() 
        await collection.findOneAndUpdate({user_id: ctx.from.id}, {$set: {drumclicked: 'helper'}})
        await ctx.editMessageMedia({type: 'photo', media: 'AgACAgIAAxkBAAIBRGRwpjcH6Fhq5COWd0O8EpvklscnAAJeyzEb3-yIS6BOcaVyM7-qAQADAgADeAADLwQ', caption: '‚ú® @pxtatxes! - HELPER {MIDI KIT}\n\n–ü–∞–∫, –ø—Ä–∏–∑–≤–∞–Ω–Ω—ã–π –ø–æ–º–æ—á—å –ø—Ä–∏–≤–Ω–µ—Å—Ç–∏ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ –≤ –≤–∞—à–∏ —Ä–∞–±–æ—Ç—ã!\n\nMIDI KIT —Å–æ–¥–µ—Ä–∂–∏—Ç:\n808 (10)\nClap\'s (10)\nHi-Hat\'s (10)\nKick\'s (10)\nMelody\'s(10)\nPerc\'s (10)'}, {reply_markup: {inline_keyboard: bpacks}})
        await ctx.answerCbQuery()
    } catch (e) {
        console.error(e);
    }
})

bot.action('fiveminutekit', async ctx => {
    try {
        if(ctx.scene.current != undefined) return await ctx.answerCbQuery() 
        await collection.findOneAndUpdate({user_id: ctx.from.id}, {$set: {drumclicked: 'fminute'}})
        await ctx.editMessageMedia({type: 'photo', media: 'AgACAgIAAxkBAAIBRWRwpm_e_ZOZnlVF0z6w8y7pctyYAAJjyzEb3-yISymDxzXXmDgTAQADAgADeQADLwQ', caption: '–ù–µ–±–æ–ª—å—à–æ–π –ø–∞–∫, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –≤ —Å–µ–±–µ –∑–∞–≥–æ—Ç–æ–≤–∫–∏ –∏ —Å–∫–µ–π–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ —Å–º–æ–≥—É—Ç –æ–±–ª–µ–≥—á–∏—Ç—å —Ç–µ–±–µ –Ω–∞–ø–∏—Å–∞–Ω–∏–µ –º–µ–ª–æ–¥–∏–π –∏ —É–¥–∞—Ä–Ω—ã—Ö –ø–∞—Ä—Ç–∏–π, –ø—Ä–∏–≤–Ω–µ—Å—Ç–∏ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ –≤ —Ä–∞–±–æ—Ç—ã –∏ –Ω–∞–π—Ç–∏ –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ –µ—Å–ª–∏ –æ–Ω–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç üíö'}, {reply_markup: {inline_keyboard: bpacks}})
        await ctx.answerCbQuery()
    } catch (e) {
        console.error(e);
    }
})

bot.action('downkit', async ctx => {
    try {
        if(ctx.scene.current != undefined) return await ctx.answerCbQuery() 
        const db = await collection.findOne({user_id: ctx.from.id})
        if(db.drumclicked == 'helper') {
            await ctx.editMessageMedia({type: 'document', media: 'BQACAgIAAxkBAAIBSWRwqC1bZjPC1iOOnhUat14dfi9gAAJ1KwACoVh4S67CxK54c24sLwQ', caption: '‚ú® @pxtatxes! - HELPER {MIDI KIT}\n\n–ü–æ—Ä–æ–ª—å –æ—Ç –∞—Ä—Ö–∏–≤–∞: pxtatxes'}, {reply_markup: {inline_keyboard: [[Markup.button.url('–°–ö–ê–ß–ê–¢–¨ –ß–ï–†–ï–ó GOOGLE DRIVE', 'https://drive.google.com/file/d/11O_Rzl9pg9sNv4pjk5ouqa2GFUJ0mG0N/view')]]}})
        }else if(db.drumclicked == 'fminute') {
            await ctx.editMessageMedia({type: 'document', media: 'BQACAgIAAxkBAAIBSmRwqDwxYvPP9nm2zWMyNX61q-U-AALKKwACoVh4S2lLPkYpkumxLwQ', caption: '‚ú® @pxtatxes! - "5 MINUTE" (Helper Pack)'}, {reply_markup: {inline_keyboard: [[Markup.button.url('–°–ö–ê–ß–ê–¢–¨ –ß–ï–†–ï–ó GOOGLE DRIVE', 'https://drive.google.com/file/d/1Egq7EM20mgdjTcILTVLLjXvrpbGmM1oH/view')]]}})
        }
        await ctx.replyWithPhoto('AgACAgIAAxkBAAIBQGRwpdUHgsO-VzXinFdsqtt53IflAAJcyzEb3-yIS8NvKBi2G2GKAQADAgADeAADLwQ', {caption: '–í–∞—à –¥—Ä–∞–º–∫–∏—Ç –∂–¥–µ—Ç –≤–∞—Å –≤—ã—à–µ ‚¨ÜÔ∏è\n\nüìÇ –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –ø–∞–∫:', reply_markup: {inline_keyboard: vpacks}})
        await ctx.answerCbQuery()
    } catch (e) {
        console.error(e);
    }
})

bot.action('backtomain', async ctx => {
    try {
        if(ctx.scene.current != undefined) return await ctx.answerCbQuery() 
        await ctx.editMessageCaption('–Ø –±–æ—Ç –ü–æ—Ç—ç–π—Ç–æ—Å–∞ ‚ú®\n\n–ï—Å–ª–∏ —É —Ç–µ–±—è –µ—Å—Ç—å –∫–∞–∫–∏–µ-—Ç–æ –≤–æ–ø—Ä–æ—Å—ã, –ø–æ–∂–µ–ª–∞–Ω–∏—è –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è - —Ç—ã –º–æ–∂–µ—à—å –æ–ø–∏—Å–∞—Ç—å –∏—Ö –∑–¥–µ—Å—å üí¨\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞üëáüèª', {reply_markup: {inline_keyboard: main_keyboards}})
        await ctx.answerCbQuery()
    } catch (e) {
        console.error(e);
    }
})

bot.action('backtopacks', async ctx => {
    try {
        if(ctx.scene.current != undefined) return await ctx.answerCbQuery() 
        await ctx.editMessageMedia({type: 'photo', media: 'AgACAgIAAxkBAAIBQGRwpdUHgsO-VzXinFdsqtt53IflAAJcyzEb3-yIS8NvKBi2G2GKAQADAgADeAADLwQ', caption: 'üìÇ –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –ø–∞–∫:'}, {reply_markup: {inline_keyboard: vpacks}})
        await ctx.answerCbQuery()
    } catch (e) {
        console.error(e);
    }
})

bot.action('backtopxtpacks', async ctx => {
    try {
        if(ctx.scene.current != undefined) return await ctx.answerCbQuery() 
        await ctx.editMessageMedia({type: 'photo', media: 'AgACAgIAAxkBAAIBQGRwpdUHgsO-VzXinFdsqtt53IflAAJcyzEb3-yIS8NvKBi2G2GKAQADAgADeAADLwQ', caption: 'ü•Å –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä–∞–º–∫–∏—Ç:'}, {reply_markup: {inline_keyboard: pxtpacks}})
        await ctx.answerCbQuery()
    } catch (e) {
        console.error(e);
    }
})

bot.action('backtouslugi', async ctx => {
    try {
        if(ctx.scene.current != undefined) return await ctx.answerCbQuery() 
        await ctx.editMessageCaption('üõ† –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –≤–∞—Å —É—Å–ª—É–≥—É:', {reply_markup: {inline_keyboard: uslugi_keyboards}})
        await ctx.answerCbQuery()
    } catch (e) {
        console.error(e);
    }
})

bot.action('backtobeatsfold', async ctx => {
    try {
        if(ctx.scene.current != undefined) return await ctx.answerCbQuery() 
        await ctx.deleteMessage(ctx.callbackQuery.message.message_id)
        await ctx.replyWithPhoto('AgACAgIAAxkBAAIBQGRwpdUHgsO-VzXinFdsqtt53IflAAJcyzEb3-yIS8NvKBi2G2GKAQADAgADeAADLwQ', {caption: 'üõ† –í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É:', reply_markup: {inline_keyboard: uslug_beats_keyboards}})
        await ctx.answerCbQuery()
    } catch (e) {
        console.error(e);
    }
})

bot.action('backtomnscenes', async ctx => {
    try {
        await ctx.deleteMessage(ctx.callbackQuery.message.message_id)
        await ctx.replyWithPhoto('AgACAgIAAxkBAAIBQGRwpdUHgsO-VzXinFdsqtt53IflAAJcyzEb3-yIS8NvKBi2G2GKAQADAgADeAADLwQ', {caption: '–Ø –±–æ—Ç –ü–æ—Ç—ç–π—Ç–æ—Å–∞ ‚ú®\n\n–ï—Å–ª–∏ —É —Ç–µ–±—è –µ—Å—Ç—å –∫–∞–∫–∏–µ-—Ç–æ –≤–æ–ø—Ä–æ—Å—ã, –ø–æ–∂–µ–ª–∞–Ω–∏—è –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è - —Ç—ã –º–æ–∂–µ—à—å –æ–ø–∏—Å–∞—Ç—å –∏—Ö –∑–¥–µ—Å—å üí¨\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞üëáüèª', reply_markup: {inline_keyboard: main_keyboards}})
        await ctx.answerCbQuery()
    } catch (e) {
        console.error(e);
    }
})

bot.action('backtosvedfold', async ctx => {
    try {
        if(ctx.scene.current != undefined) return await ctx.answerCbQuery() 
        await ctx.editMessageMedia({type: 'photo', media: 'AgACAgIAAxkBAAIBQGRwpdUHgsO-VzXinFdsqtt53IflAAJcyzEb3-yIS8NvKBi2G2GKAQADAgADeAADLwQ', caption: 'üõ† –í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É:'}, {reply_markup: {inline_keyboard: uslug_svedm_keyboards}})
        await ctx.answerCbQuery()
    } catch (e) {
        console.error(e);
    }
})

bot.on('forward_date', async ctx => console.log(ctx.message.photo.pop().file_id))



// bot.startWebhook('/', null, 3000);

bot.launch({dropPendingUpdates: true})
process.once('SIGINT', () => bot.stop('SIGINT'));
process.once('SIGTERM', () => bot.stop('SIGTERM'));
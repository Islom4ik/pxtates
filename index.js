const { Scenes, session, Telegraf, Markup } = require('telegraf');
require('dotenv').config();
const bot = new Telegraf(process.env.BOT_TOKEN);
module.exports = {Markup}
const { main_keyboards, predloj_keyboards, predloj_senderinfo, predloj_senderonv } = require('./additions/markups.js')  
const { collection, ObjectId } = require('./additions/db');
// bot.telegram.setWebhook('https://zade-production.up.railway.app', {max_connections: 50});
// const { DateTime } = require('luxon');
const { enter, leave } = Scenes.Stage;

const predlojka = new Scenes.BaseScene("predlojka");

predlojka.enter(async ctx => {
    try {
        return await ctx.reply('ü•î –ü—Ä–µ–¥–ª–æ–∂–∏—Ç–µ —Å–≤–æ—é –Ω–æ–≤–æ—Å—Ç—å, –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ–º, –∏–∑–∏ –∑–∞–¥–∞—Ç—å –º–Ω–µ –≤–æ–ø—Ä–æ—Å: ', {reply_markup: {keyboard: [['–û—Ç–º–µ–Ω–∏—Ç—å üî¥']], resize_keyboard: true}})
    } catch (e) {
        console.error(e);
    }
})

predlojka.on('text', async ctx => {
    try {
        if(ctx.message.text == '–û—Ç–º–µ–Ω–∏—Ç—å üî¥') {
            await ctx.reply('–û—Ç–º–µ–Ω–µ–Ω–æ ‚úÖ', {reply_markup: {remove_keyboard: true}})
            await ctx.replyWithPhoto({source: './start.jpg'}, {caption: `–ü—Ä–∏–≤–µ—Ç, ${ctx.from.first_name}! –Ø –±–æ—Ç –ü–æ—Ç—ç–π—Ç–æ—Å–∞ ‚ú®\n\n–ï—Å–ª–∏ —É —Ç–µ–±—è –µ—Å—Ç—å –∫–∞–∫–∏–µ-—Ç–æ –≤–æ–ø—Ä–æ—Å—ã, –ø–æ–∂–µ–ª–∞–Ω–∏—è –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è - —Ç—ã –º–æ–∂–µ—à—å –æ–ø–∏—Å–∞—Ç—å –∏—Ö –∑–¥–µ—Å—å üí¨\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞üëáüèª`, reply_markup: {inline_keyboard: main_keyboards}})
            return ctx.scene.leave('predlojka')
        }
        await ctx.reply('–û—Ç–±—Ä–∞–±–æ—Ç–∫–∞...', {reply_markup: {remove_keyboard: true}})
        await collection.findOneAndUpdate({user_id: ctx.from.id}, {$set: {predlmsg: ctx.message.message_id, predmsg: ctx.message.text}})
        await ctx.reply('–í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∞–º–∏ –Ω–∞–ø–∏—Å–∞–Ω–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –≤—ã—à–µ?', {reply_to_message_id: ctx.message.message_id, reply_markup: {inline_keyboard: predloj_keyboards}})
    } catch (e) {
        console.error(e);
    }
})

predlojka.action('predlojedit', async ctx => {
    try {
        await ctx.deleteMessage(ctx.callbackQuery.message.message_id)
        await ctx.answerCbQuery('–ó–∞–≥—Ä—É–∂–∞—é...', {show_alert: false})
        await ctx.scene.enter('predlojka')
    } catch (e) {
        console.error(e);
    }
})

predlojka.action('predlojsend', async ctx => {
    try {
        const prid = await collection.findOne({_id: new ObjectId('646f07782ec51704c9ff90bd')})
        const predid = prid.predlojids + 1
        const db = await collection.findOne({user_id: ctx.from.id})
        await collection.findOneAndUpdate({_id: new ObjectId('646f07782ec51704c9ff90bd')}, {$set: {predlojids: predid}})
        await ctx.telegram.sendMessage(5103314362, `${predid}# | –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–µ–¥–ª–æ–∂–∫–∏:\n<i>${db.predmsg}</i>`, {reply_markup: {inline_keyboard: predloj_senderinfo}, parse_mode: "HTML"})
        try {
            await ctx.deleteMessage(ctx.callbackQuery.message.message_id)
        } catch (e) {
           console.log('ER'); 
        }
        await collection.findOneAndUpdate({user_id: ctx.from.id}, {$set: {predsend: `${predid}`}})
        await ctx.replyWithPhoto({source: './start.jpg'}, {caption: `–ü—Ä–∏–≤–µ—Ç, ${ctx.from.first_name}! –Ø –±–æ—Ç –ü–æ—Ç—ç–π—Ç–æ—Å–∞ ‚ú®\n\n–ï—Å–ª–∏ —É —Ç–µ–±—è –µ—Å—Ç—å –∫–∞–∫–∏–µ-—Ç–æ –≤–æ–ø—Ä–æ—Å—ã, –ø–æ–∂–µ–ª–∞–Ω–∏—è –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è - —Ç—ã –º–æ–∂–µ—à—å –æ–ø–∏—Å–∞—Ç—å –∏—Ö –∑–¥–µ—Å—å üí¨\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞üëáüèª`, reply_markup: {inline_keyboard: main_keyboards}})
        await ctx.answerCbQuery('–û—Ç–ø—Ä–∞–≤–∏–ª ‚úÖ', {show_alert: false})
        await ctx.scene.leave('predlojka')
    } catch (e) {
        console.error(e);
    }
})

predlojka.action('predlojcancel', async ctx => {
    try {
        const db = await collection.findOne({user_id: ctx.from.id})
        await ctx.deleteMessage(ctx.callbackQuery.message.message_id)
        await ctx.replyWithPhoto({source: './start.jpg'}, {caption: `–ü—Ä–∏–≤–µ—Ç, ${ctx.from.first_name}! –Ø –±–æ—Ç –ü–æ—Ç—ç–π—Ç–æ—Å–∞ ‚ú®\n\n–ï—Å–ª–∏ —É —Ç–µ–±—è –µ—Å—Ç—å –∫–∞–∫–∏–µ-—Ç–æ –≤–æ–ø—Ä–æ—Å—ã, –ø–æ–∂–µ–ª–∞–Ω–∏—è –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è - —Ç—ã –º–æ–∂–µ—à—å –æ–ø–∏—Å–∞—Ç—å –∏—Ö –∑–¥–µ—Å—å üí¨\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞üëáüèª`, reply_markup: {inline_keyboard: main_keyboards}})
        await ctx.answerCbQuery('–û—Ç–º–µ–Ω–µ–Ω–æ ‚úÖ', {show_alert: false})
        await ctx.scene.leave('predlojka')
    } catch (e) {
        console.error(e);
    }
})

const pxtatansw = new Scenes.BaseScene("pxtatansw");

pxtatansw.enter(async ctx => {
    try {
        return await ctx.reply('ü•î –í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –∫ –ø—Ä–µ–¥–ª–æ–∂–∫–µ: ')
    } catch (e) {
        console.error(e);
    }
})

pxtatansw.on('text', async ctx => {
    try {
        const db = await collection.findOne({user_id: ctx.from.id})
        try {
            await ctx.telegram.sendMessage(db.usertoansw, 'üü¢ –ü–æ—Ç–∞—Ç–∞ –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ –≤–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ:')
            await ctx.telegram.copyMessage(db.usertoansw, ctx.chat.id, ctx.message.message_id) 
        } catch (e) {
            console.log('');
        }
        await collection.findOneAndUpdate({user_id: db.usertoansw}, {$set: {predsend: 'none'}})
        await ctx.reply('–û—Ç–ø—Ä–∞–≤–∏–ª ‚úÖ')
        await ctx.replyWithPhoto({source: './start.jpg'}, {caption: `–ü—Ä–∏–≤–µ—Ç, ${ctx.from.first_name}! –Ø –±–æ—Ç –ü–æ—Ç—ç–π—Ç–æ—Å–∞ ‚ú®\n\n–ï—Å–ª–∏ —É —Ç–µ–±—è –µ—Å—Ç—å –∫–∞–∫–∏–µ-—Ç–æ –≤–æ–ø—Ä–æ—Å—ã, –ø–æ–∂–µ–ª–∞–Ω–∏—è –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è - —Ç—ã –º–æ–∂–µ—à—å –æ–ø–∏—Å–∞—Ç—å –∏—Ö –∑–¥–µ—Å—å üí¨\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞üëáüèª`, reply_markup: {inline_keyboard: main_keyboards}})
        await ctx.scene.leave('pxtatansw')
    } catch (e) {
        console.error(e);
    }
})

const stage = new Scenes.Stage([predlojka, pxtatansw]);  
bot.use(session());
bot.use(stage.middleware());  

bot.start(async (ctx) => {
    try {
        await ctx.deleteMessage(ctx.message.message_id)
        const db = await collection.findOne({user_id: ctx.from.id})
        if(db == null) {
            await collection.insertOne({user_id: ctx.from.id, predsend: 'none', first_name: ctx.from.first_name, user_name: `@${ctx.from.username}` || '–ù–µ—Ç—É'})
            await collection.findOneAndUpdate({_id: new ObjectId('646f07782ec51704c9ff90bd')}, {$push: {users: ctx.from.id}})
        }
        await ctx.replyWithPhoto({source: './start.jpg'}, {caption: `–ü—Ä–∏–≤–µ—Ç, ${ctx.from.first_name}! –Ø –±–æ—Ç –ü–æ—Ç—ç–π—Ç–æ—Å–∞ ‚ú®\n\n–ï—Å–ª–∏ —É —Ç–µ–±—è –µ—Å—Ç—å –∫–∞–∫–∏–µ-—Ç–æ –≤–æ–ø—Ä–æ—Å—ã, –ø–æ–∂–µ–ª–∞–Ω–∏—è –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è - —Ç—ã –º–æ–∂–µ—à—å –æ–ø–∏—Å–∞—Ç—å –∏—Ö –∑–¥–µ—Å—å üí¨\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞üëáüèª`, reply_markup: {inline_keyboard: main_keyboards}})
    } catch (e) {
        console.error(e);
    }
});

// bot.on('forward_date', async ctx => {
//     try {
//         console.log(ctx.update.message);
//     } catch (e) {
//         console.error(e);
//     }
// })

bot.help(async (ctx) => {
    try {
        await ctx.reply(`–Ø –±–æ—Ç –ü–æ—Ç—ç–π—Ç–æ—Å–∞ ‚ú®\n\n–ï—Å–ª–∏ —É —Ç–µ–±—è –µ—Å—Ç—å –∫–∞–∫–∏–µ-—Ç–æ –≤–æ–ø—Ä–æ—Å—ã, –ø–æ–∂–µ–ª–∞–Ω–∏—è –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è - —Ç—ã –º–æ–∂–µ—à—å –æ–ø–∏—Å–∞—Ç—å –∏—Ö –∑–¥–µ—Å—å üí¨`)  
    } catch (e) {
        console.error(e);
    }
});

bot.action('predloj', async ctx => {
    try {
        const db = await collection.findOne({user_id: ctx.from.id})
        if(db.predsend != "none") {
            return await ctx.answerCbQuery('–í—ã –Ω–µ —Å–º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –Ω–æ–≤—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –ø–æ–∫–∞ PXTATES –Ω–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç –≤–∞—à–µ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ! –Ø —Å–æ–æ–±—â—É –≤–∞–º, –∫–∞–∫ —Ç–æ–ª—å–∫–æ –ø—Ä–µ–¥–ª–æ–∂–∫–∞ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞...', {show_alert: true})
        }
        await ctx.deleteMessage(ctx.callbackQuery.message.message_id)
        await ctx.answerCbQuery('–í—Ö–æ–¥ –≤ –ø—Ä–µ–¥–ª–æ–∂–∫—É üîÑ', {show_alert: false})
        await ctx.scene.enter('predlojka')
    } catch (e) {
        console.error(e);
    }
})

// –ü—Ä–µ–¥–ª–æ–∂–∫–∞(–æ—Ç–≤–µ—Ç):

bot.action('predlojsender', async ctx => {
    try {
        const usdb = await collection.findOne({predsend: ctx.callbackQuery.message.text.split(' ')[0].replace('#', '')})
        await ctx.editMessageText(`${usdb.predsend}# | –î–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è:\n\n<b>USER ID:</b> <code>${usdb.user_id}</code>\n<b>USER NAME:</b> <code>${usdb.first_name}</code>\n<b>USER NAME:</b> ${usdb.user_name}`, {reply_markup: {inline_keyboard: predloj_senderonv}, parse_mode: "HTML"})
        await ctx.answerCbQuery('–í–æ—Ç –µ–≥–æ –≥–æ–ª–æ–≤–∞)', {show_alert: false})
    } catch (e) {
        console.error(e);
    }
})

bot.action('predlojacanc', async ctx => {
    try {
        const db = await collection.findOneAndUpdate({predsend: ctx.callbackQuery.message.text.split(' ')[0].replace('#', '')}, {$set: {predsend: 'none'}})
        await ctx.deleteMessage(ctx.callbackQuery.message.message_id)
        await ctx.tg.sendMessage(db.value.user_id, 'üü¢ –ü—Ä–µ–¥–ª–æ–∂–∫–∞ –ø–æ—Ç–∞—Ç—ã —Å–Ω–æ–≤–∞ –¥–æ—Å—Ç—É–ø–Ω–∞!')
        await ctx.answerCbQuery('–ó–∞–∫—Ä—ã—Ç–æ ‚úÖ', {show_alert: false})
    } catch (e) {
        console.error(e);
    }
})

bot.action('predlojsenderback', async ctx => {
    try {
        const db = await collection.findOne({predsend: ctx.callbackQuery.message.text.split(' ')[0].replace('#', '')})
        await ctx.editMessageText(`${db.predsend}# | –°–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–µ–¥–ª–æ–∂–∫–∏:\n<i>${db.predmsg}</i>`, {reply_markup: {inline_keyboard: predloj_senderinfo}, parse_mode: "HTML"})
        await ctx.answerCbQuery('–í–µ—Ä–Ω—É–ª ‚úÖ', {show_alert: false})
    } catch (e) {
        console.error(e);
    }
})

bot.action('predlojanswer', async ctx => {
    try {
        const db = await collection.findOne({predsend: ctx.callbackQuery.message.text.split(' ')[0].replace('#', '')})
        await collection.findOneAndUpdate({user_id: ctx.from.id}, {$set: {usertoansw: db.user_id}})
        await ctx.deleteMessage(ctx.callbackQuery.message.message_id)
        await ctx.scene.enter('pxtatansw')
        await ctx.answerCbQuery('–ó–∞–≥—Ä—É–∂–∞—é...', {show_alert: false})
    } catch (e) {
        console.error(e);
    }
})




// bot.startWebhook('/', null, 3000);

bot.launch({dropPendingUpdates: true})
process.once('SIGINT', () => bot.stop('SIGINT'));
process.once('SIGTERM', () => bot.stop('SIGTERM'));